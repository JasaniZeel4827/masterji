{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 58, "column": 0}, "map": {"version":3,"sources":["file:///D:/masterji/lib/env.ts"],"sourcesContent":["import { createEnv } from \"@t3-oss/env-nextjs\";\r\nimport { z } from \"zod\";\r\n\r\nexport const env = createEnv({\r\n  server: {\r\n    DATABASE_URL: z.string().url(),\r\n    BETTER_AUTH_SECRET: z.string().min(1),\r\n    BETTER_AUTH_URL: z.string().url(),\r\n    AUTH_GITHUB_CLIENT_ID: z.string().min(1),\r\n    AUTH_GITHUB_SECRET: z.string().min(1),\r\n    RESEND_API_KEY: z.string().min(1),\r\n    ARCJET_KEY: z.string().min(1),\r\n    AWS_ACCESS_KEY_ID: z.string().min(1),\r\n    AWS_SECRET_ACCESS_KEY: z.string().min(1),\r\n    AWS_ENDPOINT_URL_S3: z.string().min(1),\r\n    AWS_ENDPOINT_URL_IAM: z.string().min(1),\r\n    AWS_REGION: z.string().min(1),\r\n  },\r\n\r\n\r\n  client: {\r\n    NEXT_PUBLIC_S3_BUCKET_NAME_IMAGES: z.string().min(1),\r\n  },\r\n  experimental__runtimeEnv: {\r\n    NEXT_PUBLIC_S3_BUCKET_NAME_IMAGES: process.env.NEXT_PUBLIC_S3_BUCKET_NAME_IMAGES,\r\n  },\r\n});"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,MAAM,MAAM,CAAA,GAAA,+JAAA,CAAA,YAAS,AAAD,EAAE;IAC3B,QAAQ;QACN,cAAc,+KAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG;QAC5B,oBAAoB,+KAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC;QACnC,iBAAiB,+KAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG;QAC/B,uBAAuB,+KAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC;QACtC,oBAAoB,+KAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC;QACnC,gBAAgB,+KAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC;QAC/B,YAAY,+KAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC;QAC3B,mBAAmB,+KAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC;QAClC,uBAAuB,+KAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC;QACtC,qBAAqB,+KAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC;QACpC,sBAAsB,+KAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC;QACrC,YAAY,+KAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC;IAC7B;IAGA,QAAQ;QACN,mCAAmC,+KAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC;IACpD;IACA,0BAA0B;QACxB,iCAAiC;IACnC;AACF","debugId":null}},
    {"offset": {"line": 187, "column": 0}, "map": {"version":3,"sources":["file:///D:/masterji/lib/S3Client.ts"],"sourcesContent":["import \"server-only\";\r\n\r\nimport { S3Client } from \"@aws-sdk/client-s3\";\r\nimport { env } from \"./env\";\r\n\r\nexport const S3 = new S3Client({\r\n    region: \"auto\",\r\n    endpoint: env.AWS_ENDPOINT_URL_S3,\r\n    forcePathStyle: false,\r\n});\r\n"],"names":[],"mappings":";;;AAAA;AAEA;AACA;;;;AAEO,MAAM,KAAK,IAAI,iJAAA,CAAA,WAAQ,CAAC;IAC3B,QAAQ;IACR,UAAU,4GAAA,CAAA,MAAG,CAAC,mBAAmB;IACjC,gBAAgB;AACpB","debugId":null}},
    {"offset": {"line": 205, "column": 0}, "map": {"version":3,"sources":["file:///D:/masterji/app/api/s3/upload/route.ts"],"sourcesContent":["import { env } from \"@/lib/env\";\r\nimport { PutObjectCommand } from \"@aws-sdk/client-s3\";\r\nimport { NextResponse } from \"next/server\";\r\nimport { z } from \"zod\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport { getSignedUrl } from \"@aws-sdk/s3-request-presigner\";\r\nimport { S3 } from \"@/lib/S3Client\";\r\n\r\nexport const fileUploadSchema = z.object({\r\n    fileName: z.string().min(1, { message: \"Filename is required\" }),\r\n    contentType: z.string().min(1, { message: \"Content type is required\" }),\r\n    size: z.number().min(1, { message: \"Size is required\" }),\r\n    isImage: z.boolean(),\r\n});\r\n\r\nexport async function POST(request: Request) {\r\n    try {\r\n        const body = await request.json();\r\n\r\n        const validation = fileUploadSchema.safeParse(body);\r\n\r\n        if (!validation.success) {\r\n            return NextResponse.json(\r\n                { error: \"invalid request body\" },\r\n                { status: 400 }\r\n            );\r\n        }\r\n        const { fileName, contentType, size } = validation.data;\r\n\r\n        const uniqueKey = `${uuidv4()}-${fileName}`;\r\n\r\n        const command = new PutObjectCommand({\r\n            Bucket: env.NEXT_PUBLIC_S3_BUCKET_NAME_IMAGES,\r\n            ContentType: contentType,\r\n            ContentLength: size,\r\n            Key: uniqueKey\r\n        });\r\n        const presignedUrl = await getSignedUrl(S3, command, {\r\n            expiresIn: 3600, // 1 hour\r\n        });\r\n\r\n\r\n        const response = {\r\n            presignedUrl,\r\n            key: uniqueKey,\r\n        };\r\n\r\n        return NextResponse.json(response)\r\n    } catch {\r\n        return NextResponse.json(\r\n            { error: \"Something went wrong\" },\r\n            { status: 500 }\r\n        );\r\n    }\r\n}"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;;;;;;;;AAEO,MAAM,mBAAmB,+KAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACrC,UAAU,+KAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;QAAE,SAAS;IAAuB;IAC9D,aAAa,+KAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;QAAE,SAAS;IAA2B;IACrE,MAAM,+KAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;QAAE,SAAS;IAAmB;IACtD,SAAS,+KAAA,CAAA,IAAC,CAAC,OAAO;AACtB;AAEO,eAAe,KAAK,OAAgB;IACvC,IAAI;QACA,MAAM,OAAO,MAAM,QAAQ,IAAI;QAE/B,MAAM,aAAa,iBAAiB,SAAS,CAAC;QAE9C,IAAI,CAAC,WAAW,OAAO,EAAE;YACrB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACpB;gBAAE,OAAO;YAAuB,GAChC;gBAAE,QAAQ;YAAI;QAEtB;QACA,MAAM,EAAE,QAAQ,EAAE,WAAW,EAAE,IAAI,EAAE,GAAG,WAAW,IAAI;QAEvD,MAAM,YAAY,GAAG,CAAA,GAAA,4KAAA,CAAA,KAAM,AAAD,IAAI,CAAC,EAAE,UAAU;QAE3C,MAAM,UAAU,IAAI,iJAAA,CAAA,mBAAgB,CAAC;YACjC,QAAQ,4GAAA,CAAA,MAAG,CAAC,iCAAiC;YAC7C,aAAa;YACb,eAAe;YACf,KAAK;QACT;QACA,MAAM,eAAe,MAAM,CAAA,GAAA,0LAAA,CAAA,eAAY,AAAD,EAAE,iHAAA,CAAA,KAAE,EAAE,SAAS;YACjD,WAAW;QACf;QAGA,MAAM,WAAW;YACb;YACA,KAAK;QACT;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC7B,EAAE,OAAM;QACJ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACpB;YAAE,OAAO;QAAuB,GAChC;YAAE,QAAQ;QAAI;IAEtB;AACJ","debugId":null}}]
}