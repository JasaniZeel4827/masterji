{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["file:///D:/masterji/node_modules/%40tiptap/pm/dist/state/index.js"],"sourcesContent":["// state/index.ts\nexport * from \"prosemirror-state\";\n"],"names":[],"mappings":"AAAA,iBAAiB","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 18, "column": 0}, "map": {"version":3,"sources":["file:///D:/masterji/node_modules/%40tiptap/pm/dist/view/index.js"],"sourcesContent":["// view/index.ts\nexport * from \"prosemirror-view\";\n"],"names":[],"mappings":"AAAA,gBAAgB","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 31, "column": 0}, "map": {"version":3,"sources":["file:///D:/masterji/node_modules/%40tiptap/pm/dist/keymap/index.js"],"sourcesContent":["// keymap/index.ts\nexport * from \"prosemirror-keymap\";\n"],"names":[],"mappings":"AAAA,kBAAkB","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 44, "column": 0}, "map": {"version":3,"sources":["file:///D:/masterji/node_modules/%40tiptap/pm/dist/transform/index.js"],"sourcesContent":["// transform/index.ts\nexport * from \"prosemirror-transform\";\n"],"names":[],"mappings":"AAAA,qBAAqB","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 57, "column": 0}, "map": {"version":3,"sources":["file:///D:/masterji/node_modules/%40tiptap/pm/dist/model/index.js"],"sourcesContent":["// model/index.ts\nexport * from \"prosemirror-model\";\n"],"names":[],"mappings":"AAAA,iBAAiB","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 70, "column": 0}, "map": {"version":3,"sources":["file:///D:/masterji/node_modules/%40tiptap/pm/dist/commands/index.js"],"sourcesContent":["// commands/index.ts\nexport * from \"prosemirror-commands\";\n"],"names":[],"mappings":"AAAA,oBAAoB","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 83, "column": 0}, "map": {"version":3,"sources":["file:///D:/masterji/node_modules/%40tiptap/pm/dist/schema-list/index.js"],"sourcesContent":["// schema-list/index.ts\nexport * from \"prosemirror-schema-list\";\n"],"names":[],"mappings":"AAAA,uBAAuB","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 96, "column": 0}, "map": {"version":3,"sources":["file:///D:/masterji/node_modules/%40tiptap/pm/dist/dropcursor/index.js"],"sourcesContent":["// dropcursor/index.ts\nexport * from \"prosemirror-dropcursor\";\n"],"names":[],"mappings":"AAAA,sBAAsB","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 109, "column": 0}, "map": {"version":3,"sources":["file:///D:/masterji/node_modules/%40tiptap/pm/dist/gapcursor/index.js"],"sourcesContent":["// gapcursor/index.ts\nexport * from \"prosemirror-gapcursor\";\n"],"names":[],"mappings":"AAAA,qBAAqB","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 122, "column": 0}, "map": {"version":3,"sources":["file:///D:/masterji/node_modules/%40tiptap/pm/dist/history/index.js"],"sourcesContent":["// history/index.ts\nexport * from \"prosemirror-history\";\n"],"names":[],"mappings":"AAAA,mBAAmB","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 135, "column": 0}, "map": {"version":3,"sources":["file:///D:/masterji/node_modules/%40tiptap/react/src/Context.tsx","file:///D:/masterji/node_modules/%40tiptap/react/src/EditorContent.tsx","file:///D:/masterji/node_modules/%40tiptap/react/src/useEditor.ts","file:///D:/masterji/node_modules/%40tiptap/react/src/useEditorState.ts","file:///D:/masterji/node_modules/%40tiptap/react/src/useReactNodeView.ts","file:///D:/masterji/node_modules/%40tiptap/react/src/NodeViewContent.tsx","file:///D:/masterji/node_modules/%40tiptap/react/src/NodeViewWrapper.tsx","file:///D:/masterji/node_modules/%40tiptap/react/src/ReactMarkViewRenderer.tsx","file:///D:/masterji/node_modules/%40tiptap/react/src/ReactRenderer.tsx","file:///D:/masterji/node_modules/%40tiptap/react/src/ReactNodeViewRenderer.tsx","file:///D:/masterji/node_modules/%40tiptap/react/src/index.ts"],"sourcesContent":["import type { Editor } from '@tiptap/core'\nimport type { HTMLAttributes, ReactNode } from 'react'\nimport React, { createContext, useContext, useMemo } from 'react'\n\nimport { EditorContent } from './EditorContent.js'\nimport type { UseEditorOptions } from './useEditor.js'\nimport { useEditor } from './useEditor.js'\n\nexport type EditorContextValue = {\n  editor: Editor | null\n}\n\nexport const EditorContext = createContext<EditorContextValue>({\n  editor: null,\n})\n\nexport const EditorConsumer = EditorContext.Consumer\n\n/**\n * A hook to get the current editor instance.\n */\nexport const useCurrentEditor = () => useContext(EditorContext)\n\nexport type EditorProviderProps = {\n  children?: ReactNode\n  slotBefore?: ReactNode\n  slotAfter?: ReactNode\n  editorContainerProps?: HTMLAttributes<HTMLDivElement>\n} & UseEditorOptions\n\n/**\n * This is the provider component for the editor.\n * It allows the editor to be accessible across the entire component tree\n * with `useCurrentEditor`.\n */\nexport function EditorProvider({\n  children,\n  slotAfter,\n  slotBefore,\n  editorContainerProps = {},\n  ...editorOptions\n}: EditorProviderProps) {\n  const editor = useEditor(editorOptions)\n  const contextValue = useMemo(() => ({ editor }), [editor])\n\n  if (!editor) {\n    return null\n  }\n\n  return (\n    <EditorContext.Provider value={contextValue}>\n      {slotBefore}\n      <EditorConsumer>\n        {({ editor: currentEditor }) => <EditorContent editor={currentEditor} {...editorContainerProps} />}\n      </EditorConsumer>\n      {children}\n      {slotAfter}\n    </EditorContext.Provider>\n  )\n}\n","import type { Editor } from '@tiptap/core'\nimport type { ForwardedRef, HTMLProps, LegacyRef, MutableRefObject } from 'react'\nimport React, { forwardRef } from 'react'\nimport ReactDOM from 'react-dom'\nimport { useSyncExternalStore } from 'use-sync-external-store/shim/index.js'\n\nimport type { ContentComponent, EditorWithContentComponent } from './Editor.js'\nimport type { ReactRenderer } from './ReactRenderer.js'\n\nconst mergeRefs = <T extends HTMLDivElement>(...refs: Array<MutableRefObject<T> | LegacyRef<T> | undefined>) => {\n  return (node: T) => {\n    refs.forEach(ref => {\n      if (typeof ref === 'function') {\n        ref(node)\n      } else if (ref) {\n        ;(ref as MutableRefObject<T | null>).current = node\n      }\n    })\n  }\n}\n\n/**\n * This component renders all of the editor's node views.\n */\nconst Portals: React.FC<{ contentComponent: ContentComponent }> = ({ contentComponent }) => {\n  // For performance reasons, we render the node view portals on state changes only\n  const renderers = useSyncExternalStore(\n    contentComponent.subscribe,\n    contentComponent.getSnapshot,\n    contentComponent.getServerSnapshot,\n  )\n\n  // This allows us to directly render the portals without any additional wrapper\n  return <>{Object.values(renderers)}</>\n}\n\nexport interface EditorContentProps extends HTMLProps<HTMLDivElement> {\n  editor: Editor | null\n  innerRef?: ForwardedRef<HTMLDivElement | null>\n}\n\nfunction getInstance(): ContentComponent {\n  const subscribers = new Set<() => void>()\n  let renderers: Record<string, React.ReactPortal> = {}\n\n  return {\n    /**\n     * Subscribe to the editor instance's changes.\n     */\n    subscribe(callback: () => void) {\n      subscribers.add(callback)\n      return () => {\n        subscribers.delete(callback)\n      }\n    },\n    getSnapshot() {\n      return renderers\n    },\n    getServerSnapshot() {\n      return renderers\n    },\n    /**\n     * Adds a new NodeView Renderer to the editor.\n     */\n    setRenderer(id: string, renderer: ReactRenderer) {\n      renderers = {\n        ...renderers,\n        [id]: ReactDOM.createPortal(renderer.reactElement, renderer.element, id),\n      }\n\n      subscribers.forEach(subscriber => subscriber())\n    },\n    /**\n     * Removes a NodeView Renderer from the editor.\n     */\n    removeRenderer(id: string) {\n      const nextRenderers = { ...renderers }\n\n      delete nextRenderers[id]\n      renderers = nextRenderers\n      subscribers.forEach(subscriber => subscriber())\n    },\n  }\n}\n\nexport class PureEditorContent extends React.Component<\n  EditorContentProps,\n  { hasContentComponentInitialized: boolean }\n> {\n  editorContentRef: React.RefObject<any>\n\n  initialized: boolean\n\n  unsubscribeToContentComponent?: () => void\n\n  constructor(props: EditorContentProps) {\n    super(props)\n    this.editorContentRef = React.createRef()\n    this.initialized = false\n\n    this.state = {\n      hasContentComponentInitialized: Boolean((props.editor as EditorWithContentComponent | null)?.contentComponent),\n    }\n  }\n\n  componentDidMount() {\n    this.init()\n  }\n\n  componentDidUpdate() {\n    this.init()\n  }\n\n  init() {\n    const editor = this.props.editor as EditorWithContentComponent | null\n\n    if (editor && !editor.isDestroyed && editor.options.element) {\n      if (editor.contentComponent) {\n        return\n      }\n\n      const element = this.editorContentRef.current\n\n      element.append(...editor.options.element.childNodes)\n\n      editor.setOptions({\n        element,\n      })\n\n      editor.contentComponent = getInstance()\n\n      // Has the content component been initialized?\n      if (!this.state.hasContentComponentInitialized) {\n        // Subscribe to the content component\n        this.unsubscribeToContentComponent = editor.contentComponent.subscribe(() => {\n          this.setState(prevState => {\n            if (!prevState.hasContentComponentInitialized) {\n              return {\n                hasContentComponentInitialized: true,\n              }\n            }\n            return prevState\n          })\n\n          // Unsubscribe to previous content component\n          if (this.unsubscribeToContentComponent) {\n            this.unsubscribeToContentComponent()\n          }\n        })\n      }\n\n      editor.createNodeViews()\n\n      this.initialized = true\n    }\n  }\n\n  componentWillUnmount() {\n    const editor = this.props.editor as EditorWithContentComponent | null\n\n    if (!editor) {\n      return\n    }\n\n    this.initialized = false\n\n    if (!editor.isDestroyed) {\n      editor.view.setProps({\n        nodeViews: {},\n      })\n    }\n\n    if (this.unsubscribeToContentComponent) {\n      this.unsubscribeToContentComponent()\n    }\n\n    editor.contentComponent = null\n\n    if (!editor.options.element?.firstChild) {\n      return\n    }\n\n    // TODO using the new editor.mount method might allow us to remove this\n    const newElement = document.createElement('div')\n\n    newElement.append(...editor.options.element.childNodes)\n\n    editor.setOptions({\n      element: newElement,\n    })\n  }\n\n  render() {\n    const { editor, innerRef, ...rest } = this.props\n\n    return (\n      <>\n        <div ref={mergeRefs(innerRef, this.editorContentRef)} {...rest} />\n        {/* @ts-ignore */}\n        {editor?.contentComponent && <Portals contentComponent={editor.contentComponent} />}\n      </>\n    )\n  }\n}\n\n// EditorContent should be re-created whenever the Editor instance changes\nconst EditorContentWithKey = forwardRef<HTMLDivElement, EditorContentProps>(\n  (props: Omit<EditorContentProps, 'innerRef'>, ref) => {\n    const key = React.useMemo(() => {\n      return Math.floor(Math.random() * 0xffffffff).toString()\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [props.editor])\n\n    // Can't use JSX here because it conflicts with the type definition of Vue's JSX, so use createElement\n    return React.createElement(PureEditorContent, {\n      key,\n      innerRef: ref,\n      ...props,\n    })\n  },\n)\n\nexport const EditorContent = React.memo(EditorContentWithKey)\n","import { type EditorOptions, Editor } from '@tiptap/core'\nimport type { DependencyList, MutableRefObject } from 'react'\nimport { useDebugValue, useEffect, useRef, useState } from 'react'\nimport { useSyncExternalStore } from 'use-sync-external-store/shim/index.js'\n\nimport { useEditorState } from './useEditorState.js'\n\n// @ts-ignore\nconst isDev = process.env.NODE_ENV !== 'production'\nconst isSSR = typeof window === 'undefined'\nconst isNext = isSSR || Boolean(typeof window !== 'undefined' && (window as any).next)\n\n/**\n * The options for the `useEditor` hook.\n */\nexport type UseEditorOptions = Partial<EditorOptions> & {\n  /**\n   * Whether to render the editor on the first render.\n   * If client-side rendering, set this to `true`.\n   * If server-side rendering, set this to `false`.\n   * @default true\n   */\n  immediatelyRender?: boolean\n  /**\n   * Whether to re-render the editor on each transaction.\n   * This is legacy behavior that will be removed in future versions.\n   * @default false\n   */\n  shouldRerenderOnTransaction?: boolean\n}\n\n/**\n * This class handles the creation, destruction, and re-creation of the editor instance.\n */\nclass EditorInstanceManager {\n  /**\n   * The current editor instance.\n   */\n  private editor: Editor | null = null\n\n  /**\n   * The most recent options to apply to the editor.\n   */\n  private options: MutableRefObject<UseEditorOptions>\n\n  /**\n   * The subscriptions to notify when the editor instance\n   * has been created or destroyed.\n   */\n  private subscriptions = new Set<() => void>()\n\n  /**\n   * A timeout to destroy the editor if it was not mounted within a time frame.\n   */\n  private scheduledDestructionTimeout: ReturnType<typeof setTimeout> | undefined\n\n  /**\n   * Whether the editor has been mounted.\n   */\n  private isComponentMounted = false\n\n  /**\n   * The most recent dependencies array.\n   */\n  private previousDeps: DependencyList | null = null\n\n  /**\n   * The unique instance ID. This is used to identify the editor instance. And will be re-generated for each new instance.\n   */\n  public instanceId = ''\n\n  constructor(options: MutableRefObject<UseEditorOptions>) {\n    this.options = options\n    this.subscriptions = new Set<() => void>()\n    this.setEditor(this.getInitialEditor())\n    this.scheduleDestroy()\n\n    this.getEditor = this.getEditor.bind(this)\n    this.getServerSnapshot = this.getServerSnapshot.bind(this)\n    this.subscribe = this.subscribe.bind(this)\n    this.refreshEditorInstance = this.refreshEditorInstance.bind(this)\n    this.scheduleDestroy = this.scheduleDestroy.bind(this)\n    this.onRender = this.onRender.bind(this)\n    this.createEditor = this.createEditor.bind(this)\n  }\n\n  private setEditor(editor: Editor | null) {\n    this.editor = editor\n    this.instanceId = Math.random().toString(36).slice(2, 9)\n\n    // Notify all subscribers that the editor instance has been created\n    this.subscriptions.forEach(cb => cb())\n  }\n\n  private getInitialEditor() {\n    if (this.options.current.immediatelyRender === undefined) {\n      if (isSSR || isNext) {\n        if (isDev) {\n          /**\n           * Throw an error in development, to make sure the developer is aware that tiptap cannot be SSR'd\n           * and that they need to set `immediatelyRender` to `false` to avoid hydration mismatches.\n           */\n          throw new Error(\n            'Tiptap Error: SSR has been detected, please set `immediatelyRender` explicitly to `false` to avoid hydration mismatches.',\n          )\n        }\n\n        // Best faith effort in production, run the code in the legacy mode to avoid hydration mismatches and errors in production\n        return null\n      }\n\n      // Default to immediately rendering when client-side rendering\n      return this.createEditor()\n    }\n\n    if (this.options.current.immediatelyRender && isSSR && isDev) {\n      // Warn in development, to make sure the developer is aware that tiptap cannot be SSR'd, set `immediatelyRender` to `false` to avoid hydration mismatches.\n      throw new Error(\n        'Tiptap Error: SSR has been detected, and `immediatelyRender` has been set to `true` this is an unsupported configuration that may result in errors, explicitly set `immediatelyRender` to `false` to avoid hydration mismatches.',\n      )\n    }\n\n    if (this.options.current.immediatelyRender) {\n      return this.createEditor()\n    }\n\n    return null\n  }\n\n  /**\n   * Create a new editor instance. And attach event listeners.\n   */\n  private createEditor(): Editor {\n    const optionsToApply: Partial<EditorOptions> = {\n      ...this.options.current,\n      // Always call the most recent version of the callback function by default\n      onBeforeCreate: (...args) => this.options.current.onBeforeCreate?.(...args),\n      onBlur: (...args) => this.options.current.onBlur?.(...args),\n      onCreate: (...args) => this.options.current.onCreate?.(...args),\n      onDestroy: (...args) => this.options.current.onDestroy?.(...args),\n      onFocus: (...args) => this.options.current.onFocus?.(...args),\n      onSelectionUpdate: (...args) => this.options.current.onSelectionUpdate?.(...args),\n      onTransaction: (...args) => this.options.current.onTransaction?.(...args),\n      onUpdate: (...args) => this.options.current.onUpdate?.(...args),\n      onContentError: (...args) => this.options.current.onContentError?.(...args),\n      onDrop: (...args) => this.options.current.onDrop?.(...args),\n      onPaste: (...args) => this.options.current.onPaste?.(...args),\n      onDelete: (...args) => this.options.current.onDelete?.(...args),\n    }\n    const editor = new Editor(optionsToApply)\n\n    // no need to keep track of the event listeners, they will be removed when the editor is destroyed\n\n    return editor\n  }\n\n  /**\n   * Get the current editor instance.\n   */\n  getEditor(): Editor | null {\n    return this.editor\n  }\n\n  /**\n   * Always disable the editor on the server-side.\n   */\n  getServerSnapshot(): null {\n    return null\n  }\n\n  /**\n   * Subscribe to the editor instance's changes.\n   */\n  subscribe(onStoreChange: () => void) {\n    this.subscriptions.add(onStoreChange)\n\n    return () => {\n      this.subscriptions.delete(onStoreChange)\n    }\n  }\n\n  static compareOptions(a: UseEditorOptions, b: UseEditorOptions) {\n    return (Object.keys(a) as (keyof UseEditorOptions)[]).every(key => {\n      if (\n        [\n          'onCreate',\n          'onBeforeCreate',\n          'onDestroy',\n          'onUpdate',\n          'onTransaction',\n          'onFocus',\n          'onBlur',\n          'onSelectionUpdate',\n          'onContentError',\n          'onDrop',\n          'onPaste',\n        ].includes(key)\n      ) {\n        // we don't want to compare callbacks, they are always different and only registered once\n        return true\n      }\n\n      // We often encourage putting extensions inlined in the options object, so we will do a slightly deeper comparison here\n      if (key === 'extensions' && a.extensions && b.extensions) {\n        if (a.extensions.length !== b.extensions.length) {\n          return false\n        }\n        return a.extensions.every((extension, index) => {\n          if (extension !== b.extensions?.[index]) {\n            return false\n          }\n          return true\n        })\n      }\n      if (a[key] !== b[key]) {\n        // if any of the options have changed, we should update the editor options\n        return false\n      }\n      return true\n    })\n  }\n\n  /**\n   * On each render, we will create, update, or destroy the editor instance.\n   * @param deps The dependencies to watch for changes\n   * @returns A cleanup function\n   */\n  onRender(deps: DependencyList) {\n    // The returned callback will run on each render\n    return () => {\n      this.isComponentMounted = true\n      // Cleanup any scheduled destructions, since we are currently rendering\n      clearTimeout(this.scheduledDestructionTimeout)\n\n      if (this.editor && !this.editor.isDestroyed && deps.length === 0) {\n        // if the editor does exist & deps are empty, we don't need to re-initialize the editor generally\n        if (!EditorInstanceManager.compareOptions(this.options.current, this.editor.options)) {\n          // But, the options are different, so we need to update the editor options\n          // Still, this is faster than re-creating the editor\n          this.editor.setOptions({\n            ...this.options.current,\n            editable: this.editor.isEditable,\n          })\n        }\n      } else {\n        // When the editor:\n        // - does not yet exist\n        // - is destroyed\n        // - the deps array changes\n        // We need to destroy the editor instance and re-initialize it\n        this.refreshEditorInstance(deps)\n      }\n\n      return () => {\n        this.isComponentMounted = false\n        this.scheduleDestroy()\n      }\n    }\n  }\n\n  /**\n   * Recreate the editor instance if the dependencies have changed.\n   */\n  private refreshEditorInstance(deps: DependencyList) {\n    if (this.editor && !this.editor.isDestroyed) {\n      // Editor instance already exists\n      if (this.previousDeps === null) {\n        // If lastDeps has not yet been initialized, reuse the current editor instance\n        this.previousDeps = deps\n        return\n      }\n      const depsAreEqual =\n        this.previousDeps.length === deps.length && this.previousDeps.every((dep, index) => dep === deps[index])\n\n      if (depsAreEqual) {\n        // deps exist and are equal, no need to recreate\n        return\n      }\n    }\n\n    if (this.editor && !this.editor.isDestroyed) {\n      // Destroy the editor instance if it exists\n      this.editor.destroy()\n    }\n\n    this.setEditor(this.createEditor())\n\n    // Update the lastDeps to the current deps\n    this.previousDeps = deps\n  }\n\n  /**\n   * Schedule the destruction of the editor instance.\n   * This will only destroy the editor if it was not mounted on the next tick.\n   * This is to avoid destroying the editor instance when it's actually still mounted.\n   */\n  private scheduleDestroy() {\n    const currentInstanceId = this.instanceId\n    const currentEditor = this.editor\n\n    // Wait two ticks to see if the component is still mounted\n    this.scheduledDestructionTimeout = setTimeout(() => {\n      if (this.isComponentMounted && this.instanceId === currentInstanceId) {\n        // If still mounted on the following tick, with the same instanceId, do not destroy the editor\n        if (currentEditor) {\n          // just re-apply options as they might have changed\n          currentEditor.setOptions(this.options.current)\n        }\n        return\n      }\n      if (currentEditor && !currentEditor.isDestroyed) {\n        currentEditor.destroy()\n        if (this.instanceId === currentInstanceId) {\n          this.setEditor(null)\n        }\n      }\n      // This allows the effect to run again between ticks\n      // which may save us from having to re-create the editor\n    }, 1)\n  }\n}\n\n/**\n * This hook allows you to create an editor instance.\n * @param options The editor options\n * @param deps The dependencies to watch for changes\n * @returns The editor instance\n * @example const editor = useEditor({ extensions: [...] })\n */\nexport function useEditor(\n  options: UseEditorOptions & { immediatelyRender: false },\n  deps?: DependencyList,\n): Editor | null\n\n/**\n * This hook allows you to create an editor instance.\n * @param options The editor options\n * @param deps The dependencies to watch for changes\n * @returns The editor instance\n * @example const editor = useEditor({ extensions: [...] })\n */\nexport function useEditor(options: UseEditorOptions, deps?: DependencyList): Editor\n\nexport function useEditor(options: UseEditorOptions = {}, deps: DependencyList = []): Editor | null {\n  const mostRecentOptions = useRef(options)\n\n  mostRecentOptions.current = options\n\n  const [instanceManager] = useState(() => new EditorInstanceManager(mostRecentOptions))\n\n  const editor = useSyncExternalStore(\n    instanceManager.subscribe,\n    instanceManager.getEditor,\n    instanceManager.getServerSnapshot,\n  )\n\n  useDebugValue(editor)\n\n  // This effect will handle creating/updating the editor instance\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(instanceManager.onRender(deps))\n\n  // The default behavior is to re-render on each transaction\n  // This is legacy behavior that will be removed in future versions\n  useEditorState({\n    editor,\n    selector: ({ transactionNumber }) => {\n      if (options.shouldRerenderOnTransaction === false || options.shouldRerenderOnTransaction === undefined) {\n        // This will prevent the editor from re-rendering on each transaction\n        return null\n      }\n\n      // This will avoid re-rendering on the first transaction when `immediatelyRender` is set to `true`\n      if (options.immediatelyRender && transactionNumber === 0) {\n        return 0\n      }\n      return transactionNumber + 1\n    },\n  })\n\n  return editor\n}\n","import type { Editor } from '@tiptap/core'\nimport deepEqual from 'fast-deep-equal/es6/react.js'\nimport { useDebugValue, useEffect, useLayoutEffect, useState } from 'react'\nimport { useSyncExternalStoreWithSelector } from 'use-sync-external-store/shim/with-selector.js'\n\nconst useIsomorphicLayoutEffect = typeof window !== 'undefined' ? useLayoutEffect : useEffect\n\nexport type EditorStateSnapshot<TEditor extends Editor | null = Editor | null> = {\n  editor: TEditor\n  transactionNumber: number\n}\n\nexport type UseEditorStateOptions<TSelectorResult, TEditor extends Editor | null = Editor | null> = {\n  /**\n   * The editor instance.\n   */\n  editor: TEditor\n  /**\n   * A selector function to determine the value to compare for re-rendering.\n   */\n  selector: (context: EditorStateSnapshot<TEditor>) => TSelectorResult\n  /**\n   * A custom equality function to determine if the editor should re-render.\n   * @default `deepEqual` from `fast-deep-equal`\n   */\n  equalityFn?: (a: TSelectorResult, b: TSelectorResult | null) => boolean\n}\n\n/**\n * To synchronize the editor instance with the component state,\n * we need to create a separate instance that is not affected by the component re-renders.\n */\nclass EditorStateManager<TEditor extends Editor | null = Editor | null> {\n  private transactionNumber = 0\n\n  private lastTransactionNumber = 0\n\n  private lastSnapshot: EditorStateSnapshot<TEditor>\n\n  private editor: TEditor\n\n  private subscribers = new Set<() => void>()\n\n  constructor(initialEditor: TEditor) {\n    this.editor = initialEditor\n    this.lastSnapshot = { editor: initialEditor, transactionNumber: 0 }\n\n    this.getSnapshot = this.getSnapshot.bind(this)\n    this.getServerSnapshot = this.getServerSnapshot.bind(this)\n    this.watch = this.watch.bind(this)\n    this.subscribe = this.subscribe.bind(this)\n  }\n\n  /**\n   * Get the current editor instance.\n   */\n  getSnapshot(): EditorStateSnapshot<TEditor> {\n    if (this.transactionNumber === this.lastTransactionNumber) {\n      return this.lastSnapshot\n    }\n    this.lastTransactionNumber = this.transactionNumber\n    this.lastSnapshot = { editor: this.editor, transactionNumber: this.transactionNumber }\n    return this.lastSnapshot\n  }\n\n  /**\n   * Always disable the editor on the server-side.\n   */\n  getServerSnapshot(): EditorStateSnapshot<null> {\n    return { editor: null, transactionNumber: 0 }\n  }\n\n  /**\n   * Subscribe to the editor instance's changes.\n   */\n  subscribe(callback: () => void): () => void {\n    this.subscribers.add(callback)\n    return () => {\n      this.subscribers.delete(callback)\n    }\n  }\n\n  /**\n   * Watch the editor instance for changes.\n   */\n  watch(nextEditor: Editor | null): undefined | (() => void) {\n    this.editor = nextEditor as TEditor\n\n    if (this.editor) {\n      /**\n       * This will force a re-render when the editor state changes.\n       * This is to support things like `editor.can().toggleBold()` in components that `useEditor`.\n       * This could be more efficient, but it's a good trade-off for now.\n       */\n      const fn = () => {\n        this.transactionNumber += 1\n        this.subscribers.forEach(callback => callback())\n      }\n\n      const currentEditor = this.editor\n\n      currentEditor.on('transaction', fn)\n      return () => {\n        currentEditor.off('transaction', fn)\n      }\n    }\n\n    return undefined\n  }\n}\n\n/**\n * This hook allows you to watch for changes on the editor instance.\n * It will allow you to select a part of the editor state and re-render the component when it changes.\n * @example\n * ```tsx\n * const editor = useEditor({...options})\n * const { currentSelection } = useEditorState({\n *  editor,\n *  selector: snapshot => ({ currentSelection: snapshot.editor.state.selection }),\n * })\n */\nexport function useEditorState<TSelectorResult>(\n  options: UseEditorStateOptions<TSelectorResult, Editor>,\n): TSelectorResult\n/**\n * This hook allows you to watch for changes on the editor instance.\n * It will allow you to select a part of the editor state and re-render the component when it changes.\n * @example\n * ```tsx\n * const editor = useEditor({...options})\n * const { currentSelection } = useEditorState({\n *  editor,\n *  selector: snapshot => ({ currentSelection: snapshot.editor.state.selection }),\n * })\n */\nexport function useEditorState<TSelectorResult>(\n  options: UseEditorStateOptions<TSelectorResult, Editor | null>,\n): TSelectorResult | null\n\n/**\n * This hook allows you to watch for changes on the editor instance.\n * It will allow you to select a part of the editor state and re-render the component when it changes.\n * @example\n * ```tsx\n * const editor = useEditor({...options})\n * const { currentSelection } = useEditorState({\n *  editor,\n *  selector: snapshot => ({ currentSelection: snapshot.editor.state.selection }),\n * })\n */\nexport function useEditorState<TSelectorResult>(\n  options: UseEditorStateOptions<TSelectorResult, Editor> | UseEditorStateOptions<TSelectorResult, Editor | null>,\n): TSelectorResult | null {\n  const [editorStateManager] = useState(() => new EditorStateManager(options.editor))\n\n  // Using the `useSyncExternalStore` hook to sync the editor instance with the component state\n  const selectedState = useSyncExternalStoreWithSelector(\n    editorStateManager.subscribe,\n    editorStateManager.getSnapshot,\n    editorStateManager.getServerSnapshot,\n    options.selector as UseEditorStateOptions<TSelectorResult, Editor | null>['selector'],\n    options.equalityFn ?? deepEqual,\n  )\n\n  useIsomorphicLayoutEffect(() => {\n    return editorStateManager.watch(options.editor)\n  }, [options.editor, editorStateManager])\n\n  useDebugValue(selectedState)\n\n  return selectedState\n}\n","import type { ReactNode } from 'react'\nimport { createContext, createElement, useContext } from 'react'\n\nexport interface ReactNodeViewContextProps {\n  onDragStart?: (event: DragEvent) => void\n  nodeViewContentRef?: (element: HTMLElement | null) => void\n  /**\n   * This allows you to add children into the NodeViewContent component.\n   * This is useful when statically rendering the content of a node view.\n   */\n  nodeViewContentChildren?: ReactNode\n}\n\nexport const ReactNodeViewContext = createContext<ReactNodeViewContextProps>({\n  onDragStart: () => {\n    // no-op\n  },\n  nodeViewContentChildren: undefined,\n  nodeViewContentRef: () => {\n    // no-op\n  },\n})\n\nexport const ReactNodeViewContentProvider = ({ children, content }: { children: ReactNode; content: ReactNode }) => {\n  return createElement(ReactNodeViewContext.Provider, { value: { nodeViewContentChildren: content } }, children)\n}\n\nexport const useReactNodeView = () => useContext(ReactNodeViewContext)\n","import type { ComponentProps } from 'react'\nimport React from 'react'\n\nimport { useReactNodeView } from './useReactNodeView.js'\n\nexport type NodeViewContentProps<T extends keyof React.JSX.IntrinsicElements = 'div'> = {\n  as?: NoInfer<T>\n} & ComponentProps<T>\n\nexport function NodeViewContent<T extends keyof React.JSX.IntrinsicElements = 'div'>({\n  as: Tag = 'div' as T,\n  ...props\n}: NodeViewContentProps<T>) {\n  const { nodeViewContentRef, nodeViewContentChildren } = useReactNodeView()\n\n  return (\n    // @ts-ignore\n    <Tag\n      {...props}\n      ref={nodeViewContentRef}\n      data-node-view-content=\"\"\n      style={{\n        whiteSpace: 'pre-wrap',\n        ...props.style,\n      }}\n    >\n      {nodeViewContentChildren}\n    </Tag>\n  )\n}\n","import React from 'react'\n\nimport { useReactNodeView } from './useReactNodeView.js'\n\nexport interface NodeViewWrapperProps {\n  [key: string]: any\n  as?: React.ElementType\n}\n\nexport const NodeViewWrapper: React.FC<NodeViewWrapperProps> = React.forwardRef((props, ref) => {\n  const { onDragStart } = useReactNodeView()\n  const Tag = props.as || 'div'\n\n  return (\n    // @ts-ignore\n    <Tag\n      {...props}\n      ref={ref}\n      data-node-view-wrapper=\"\"\n      onDragStart={onDragStart}\n      style={{\n        whiteSpace: 'normal',\n        ...props.style,\n      }}\n    />\n  )\n})\n","/* eslint-disable @typescript-eslint/no-shadow */\nimport type { MarkViewProps, MarkViewRenderer, MarkViewRendererOptions } from '@tiptap/core'\nimport { MarkView } from '@tiptap/core'\nimport React from 'react'\n\n// import { flushSync } from 'react-dom'\nimport { ReactRenderer } from './ReactRenderer.js'\n\nexport interface MarkViewContextProps {\n  markViewContentRef: (element: HTMLElement | null) => void\n}\nexport const ReactMarkViewContext = React.createContext<MarkViewContextProps>({\n  markViewContentRef: () => {\n    // do nothing\n  },\n})\n\nexport type MarkViewContentProps<T extends keyof React.JSX.IntrinsicElements = 'span'> = {\n  as?: T\n} & Omit<React.ComponentProps<T>, 'as'>\n\nexport const MarkViewContent = <T extends keyof React.JSX.IntrinsicElements = 'span'>(\n  props: MarkViewContentProps<T>,\n) => {\n  const { as: Tag = 'span', ...rest } = props\n  const { markViewContentRef } = React.useContext(ReactMarkViewContext)\n\n  return (\n    // @ts-ignore\n    <Tag {...rest} ref={markViewContentRef} data-mark-view-content=\"\" />\n  )\n}\n\nexport interface ReactMarkViewRendererOptions extends MarkViewRendererOptions {\n  /**\n   * The tag name of the element wrapping the React component.\n   */\n  as?: string\n  className?: string\n  attrs?: { [key: string]: string }\n}\n\nexport class ReactMarkView extends MarkView<React.ComponentType<MarkViewProps>, ReactMarkViewRendererOptions> {\n  renderer: ReactRenderer\n  contentDOMElement: HTMLElement | null\n  didMountContentDomElement = false\n\n  constructor(\n    component: React.ComponentType<MarkViewProps>,\n    props: MarkViewProps,\n    options?: Partial<ReactMarkViewRendererOptions>,\n  ) {\n    super(component, props, options)\n\n    const { as = 'span', attrs, className = '' } = options || {}\n    const componentProps = { ...props, updateAttributes: this.updateAttributes.bind(this) } satisfies MarkViewProps\n\n    this.contentDOMElement = document.createElement('span')\n\n    const markViewContentRef: MarkViewContextProps['markViewContentRef'] = el => {\n      if (el && this.contentDOMElement && el.firstChild !== this.contentDOMElement) {\n        el.appendChild(this.contentDOMElement)\n        this.didMountContentDomElement = true\n      }\n    }\n    const context: MarkViewContextProps = {\n      markViewContentRef,\n    }\n\n    // For performance reasons, we memoize the provider component\n    // And all of the things it requires are declared outside of the component, so it doesn't need to re-render\n    const ReactMarkViewProvider: React.FunctionComponent<MarkViewProps> = React.memo(componentProps => {\n      return (\n        <ReactMarkViewContext.Provider value={context}>\n          {React.createElement(component, componentProps)}\n        </ReactMarkViewContext.Provider>\n      )\n    })\n\n    ReactMarkViewProvider.displayName = 'ReactNodeView'\n\n    this.renderer = new ReactRenderer(ReactMarkViewProvider, {\n      editor: props.editor,\n      props: componentProps,\n      as,\n      className: `mark-${props.mark.type.name} ${className}`.trim(),\n    })\n\n    if (attrs) {\n      this.renderer.updateAttributes(attrs)\n    }\n  }\n\n  get dom() {\n    return this.renderer.element as HTMLElement\n  }\n\n  get contentDOM() {\n    if (!this.didMountContentDomElement) {\n      return null\n    }\n    return this.contentDOMElement as HTMLElement\n  }\n}\n\nexport function ReactMarkViewRenderer(\n  component: React.ComponentType<MarkViewProps>,\n  options: Partial<ReactMarkViewRendererOptions> = {},\n): MarkViewRenderer {\n  return props => new ReactMarkView(component, props, options)\n}\n","import type { Editor } from '@tiptap/core'\nimport type {\n  ComponentClass,\n  ForwardRefExoticComponent,\n  FunctionComponent,\n  PropsWithoutRef,\n  ReactNode,\n  RefAttributes,\n} from 'react'\nimport { version as reactVersion } from 'react'\nimport { flushSync } from 'react-dom'\n\nimport type { EditorWithContentComponent } from './Editor.js'\n\n/**\n * Check if a component is a class component.\n * @param Component\n * @returns {boolean}\n */\nfunction isClassComponent(Component: any) {\n  return !!(typeof Component === 'function' && Component.prototype && Component.prototype.isReactComponent)\n}\n\n/**\n * Check if a component is a forward ref component.\n * @param Component\n * @returns {boolean}\n */\nfunction isForwardRefComponent(Component: any) {\n  return !!(\n    typeof Component === 'object' &&\n    Component.$$typeof &&\n    (Component.$$typeof.toString() === 'Symbol(react.forward_ref)' ||\n      Component.$$typeof.description === 'react.forward_ref')\n  )\n}\n\n/**\n * Check if a component is a memoized component.\n * @param Component\n * @returns {boolean}\n */\nfunction isMemoComponent(Component: any) {\n  return !!(\n    typeof Component === 'object' &&\n    Component.$$typeof &&\n    (Component.$$typeof.toString() === 'Symbol(react.memo)' || Component.$$typeof.description === 'react.memo')\n  )\n}\n\n/**\n * Check if a component can safely receive a ref prop.\n * This includes class components, forwardRef components, and memoized components\n * that wrap forwardRef or class components.\n * @param Component\n * @returns {boolean}\n */\nfunction canReceiveRef(Component: any) {\n  // Check if it's a class component\n  if (isClassComponent(Component)) {\n    return true\n  }\n\n  // Check if it's a forwardRef component\n  if (isForwardRefComponent(Component)) {\n    return true\n  }\n\n  // Check if it's a memoized component\n  if (isMemoComponent(Component)) {\n    // For memoized components, check the wrapped component\n    const wrappedComponent = Component.type\n    if (wrappedComponent) {\n      return isClassComponent(wrappedComponent) || isForwardRefComponent(wrappedComponent)\n    }\n  }\n\n  return false\n}\n\n/**\n * Check if we're running React 19+ by detecting if function components support ref props\n * @returns {boolean}\n */\nfunction isReact19Plus(): boolean {\n  // React 19 is detected by checking React version if available\n  // In practice, we'll use a more conservative approach and assume React 18 behavior\n  // unless we can definitively detect React 19\n  try {\n    // @ts-ignore\n    if (reactVersion) {\n      const majorVersion = parseInt(reactVersion.split('.')[0], 10)\n      return majorVersion >= 19\n    }\n  } catch {\n    // Fallback to React 18 behavior if we can't determine version\n  }\n  return false\n}\n\nexport interface ReactRendererOptions {\n  /**\n   * The editor instance.\n   * @type {Editor}\n   */\n  editor: Editor\n\n  /**\n   * The props for the component.\n   * @type {Record<string, any>}\n   * @default {}\n   */\n  props?: Record<string, any>\n\n  /**\n   * The tag name of the element.\n   * @type {string}\n   * @default 'div'\n   */\n  as?: string\n\n  /**\n   * The class name of the element.\n   * @type {string}\n   * @default ''\n   * @example 'foo bar'\n   */\n  className?: string\n}\n\ntype ComponentType<R, P> =\n  | ComponentClass<P>\n  | FunctionComponent<P>\n  | ForwardRefExoticComponent<PropsWithoutRef<P> & RefAttributes<R>>\n\n/**\n * The ReactRenderer class. It's responsible for rendering React components inside the editor.\n * @example\n * new ReactRenderer(MyComponent, {\n *   editor,\n *   props: {\n *     foo: 'bar',\n *   },\n *   as: 'span',\n * })\n */\nexport class ReactRenderer<R = unknown, P extends Record<string, any> = object> {\n  id: string\n\n  editor: Editor\n\n  component: any\n\n  element: Element\n\n  props: P\n\n  reactElement: ReactNode\n\n  ref: R | null = null\n\n  /**\n   * Immediately creates element and renders the provided React component.\n   */\n  constructor(\n    component: ComponentType<R, P>,\n    { editor, props = {}, as = 'div', className = '' }: ReactRendererOptions,\n  ) {\n    this.id = Math.floor(Math.random() * 0xffffffff).toString()\n    this.component = component\n    this.editor = editor as EditorWithContentComponent\n    this.props = props as P\n    this.element = document.createElement(as)\n    this.element.classList.add('react-renderer')\n\n    if (className) {\n      this.element.classList.add(...className.split(' '))\n    }\n\n    // If the editor is already initialized, we will need to\n    // synchronously render the component to ensure it renders\n    // together with Prosemirror's rendering.\n    if (this.editor.isInitialized) {\n      flushSync(() => {\n        this.render()\n      })\n    } else {\n      queueMicrotask(() => {\n        this.render()\n      })\n    }\n  }\n\n  /**\n   * Render the React component.\n   */\n  render(): void {\n    const Component = this.component\n    const props = this.props\n    const editor = this.editor as EditorWithContentComponent\n\n    // Handle ref forwarding with React 18/19 compatibility\n    const isReact19 = isReact19Plus()\n    const componentCanReceiveRef = canReceiveRef(Component)\n\n    const elementProps = { ...props }\n\n    // Always remove ref if the component cannot receive it (unless React 19+)\n    if (elementProps.ref && !(isReact19 || componentCanReceiveRef)) {\n      delete elementProps.ref\n    }\n\n    // Only assign our own ref if allowed\n    if (!elementProps.ref && (isReact19 || componentCanReceiveRef)) {\n      // @ts-ignore - Setting ref prop for compatible components\n      elementProps.ref = (ref: R) => {\n        this.ref = ref\n      }\n    }\n\n    this.reactElement = <Component {...elementProps} />\n\n    editor?.contentComponent?.setRenderer(this.id, this)\n  }\n\n  /**\n   * Re-renders the React component with new props.\n   */\n  updateProps(props: Record<string, any> = {}): void {\n    this.props = {\n      ...this.props,\n      ...props,\n    }\n\n    this.render()\n  }\n\n  /**\n   * Destroy the React component.\n   */\n  destroy(): void {\n    const editor = this.editor as EditorWithContentComponent\n\n    editor?.contentComponent?.removeRenderer(this.id)\n  }\n\n  /**\n   * Update the attributes of the element that holds the React component.\n   */\n  updateAttributes(attributes: Record<string, string>): void {\n    Object.keys(attributes).forEach(key => {\n      this.element.setAttribute(key, attributes[key])\n    })\n  }\n}\n","import type {\n  DecorationWithType,\n  Editor,\n  NodeViewRenderer,\n  NodeViewRendererOptions,\n  NodeViewRendererProps,\n} from '@tiptap/core'\nimport { getRenderedAttributes, NodeView } from '@tiptap/core'\nimport type { Node, Node as ProseMirrorNode } from '@tiptap/pm/model'\nimport type { Decoration, DecorationSource, NodeView as ProseMirrorNodeView } from '@tiptap/pm/view'\nimport type { ComponentType, NamedExoticComponent } from 'react'\nimport { createElement, createRef, memo } from 'react'\n\nimport type { EditorWithContentComponent } from './Editor.js'\nimport { ReactRenderer } from './ReactRenderer.js'\nimport type { ReactNodeViewProps } from './types.js'\nimport type { ReactNodeViewContextProps } from './useReactNodeView.js'\nimport { ReactNodeViewContext } from './useReactNodeView.js'\n\nexport interface ReactNodeViewRendererOptions extends NodeViewRendererOptions {\n  /**\n   * This function is called when the node view is updated.\n   * It allows you to compare the old node with the new node and decide if the component should update.\n   */\n  update:\n    | ((props: {\n        oldNode: ProseMirrorNode\n        oldDecorations: readonly Decoration[]\n        oldInnerDecorations: DecorationSource\n        newNode: ProseMirrorNode\n        newDecorations: readonly Decoration[]\n        innerDecorations: DecorationSource\n        updateProps: () => void\n      }) => boolean)\n    | null\n  /**\n   * The tag name of the element wrapping the React component.\n   */\n  as?: string\n  /**\n   * The class name of the element wrapping the React component.\n   */\n  className?: string\n  /**\n   * Attributes that should be applied to the element wrapping the React component.\n   * If this is a function, it will be called each time the node view is updated.\n   * If this is an object, it will be applied once when the node view is mounted.\n   */\n  attrs?:\n    | Record<string, string>\n    | ((props: { node: ProseMirrorNode; HTMLAttributes: Record<string, any> }) => Record<string, string>)\n}\n\nexport class ReactNodeView<\n  T = HTMLElement,\n  Component extends ComponentType<ReactNodeViewProps<T>> = ComponentType<ReactNodeViewProps<T>>,\n  NodeEditor extends Editor = Editor,\n  Options extends ReactNodeViewRendererOptions = ReactNodeViewRendererOptions,\n> extends NodeView<Component, NodeEditor, Options> {\n  /**\n   * The renderer instance.\n   */\n  renderer!: ReactRenderer<unknown, ReactNodeViewProps<T>>\n\n  /**\n   * The element that holds the rich-text content of the node.\n   */\n  contentDOMElement!: HTMLElement | null\n\n  constructor(component: Component, props: NodeViewRendererProps, options?: Partial<Options>) {\n    super(component, props, options)\n\n    if (!this.node.isLeaf) {\n      if (this.options.contentDOMElementTag) {\n        this.contentDOMElement = document.createElement(this.options.contentDOMElementTag)\n      } else {\n        this.contentDOMElement = document.createElement(this.node.isInline ? 'span' : 'div')\n      }\n\n      this.contentDOMElement.dataset.nodeViewContentReact = ''\n      this.contentDOMElement.dataset.nodeViewWrapper = ''\n\n      // For some reason the whiteSpace prop is not inherited properly in Chrome and Safari\n      // With this fix it seems to work fine\n      // See: https://github.com/ueberdosis/tiptap/issues/1197\n      this.contentDOMElement.style.whiteSpace = 'inherit'\n\n      const contentTarget = this.dom.querySelector('[data-node-view-content]')\n\n      if (!contentTarget) {\n        return\n      }\n\n      contentTarget.appendChild(this.contentDOMElement)\n    }\n  }\n\n  /**\n   * Setup the React component.\n   * Called on initialization.\n   */\n  mount() {\n    const props = {\n      editor: this.editor,\n      node: this.node,\n      decorations: this.decorations as DecorationWithType[],\n      innerDecorations: this.innerDecorations,\n      view: this.view,\n      selected: false,\n      extension: this.extension,\n      HTMLAttributes: this.HTMLAttributes,\n      getPos: () => this.getPos(),\n      updateAttributes: (attributes = {}) => this.updateAttributes(attributes),\n      deleteNode: () => this.deleteNode(),\n      ref: createRef<T>(),\n    } satisfies ReactNodeViewProps<T>\n\n    if (!(this.component as any).displayName) {\n      const capitalizeFirstChar = (string: string): string => {\n        return string.charAt(0).toUpperCase() + string.substring(1)\n      }\n\n      this.component.displayName = capitalizeFirstChar(this.extension.name)\n    }\n\n    const onDragStart = this.onDragStart.bind(this)\n    const nodeViewContentRef: ReactNodeViewContextProps['nodeViewContentRef'] = element => {\n      if (element && this.contentDOMElement && element.firstChild !== this.contentDOMElement) {\n        // remove the nodeViewWrapper attribute from the element\n        if (element.hasAttribute('data-node-view-wrapper')) {\n          element.removeAttribute('data-node-view-wrapper')\n        }\n        element.appendChild(this.contentDOMElement)\n      }\n    }\n    const context = { onDragStart, nodeViewContentRef }\n    const Component = this.component\n    // For performance reasons, we memoize the provider component\n    // And all of the things it requires are declared outside of the component, so it doesn't need to re-render\n    const ReactNodeViewProvider: NamedExoticComponent<ReactNodeViewProps<T>> = memo(componentProps => {\n      return (\n        <ReactNodeViewContext.Provider value={context}>\n          {createElement(Component, componentProps)}\n        </ReactNodeViewContext.Provider>\n      )\n    })\n\n    ReactNodeViewProvider.displayName = 'ReactNodeView'\n\n    let as = this.node.isInline ? 'span' : 'div'\n\n    if (this.options.as) {\n      as = this.options.as\n    }\n\n    const { className = '' } = this.options\n\n    this.handleSelectionUpdate = this.handleSelectionUpdate.bind(this)\n\n    this.renderer = new ReactRenderer(ReactNodeViewProvider, {\n      editor: this.editor,\n      props,\n      as,\n      className: `node-${this.node.type.name} ${className}`.trim(),\n    })\n\n    this.editor.on('selectionUpdate', this.handleSelectionUpdate)\n    this.updateElementAttributes()\n  }\n\n  /**\n   * Return the DOM element.\n   * This is the element that will be used to display the node view.\n   */\n  get dom() {\n    if (\n      this.renderer.element.firstElementChild &&\n      !this.renderer.element.firstElementChild?.hasAttribute('data-node-view-wrapper')\n    ) {\n      throw Error('Please use the NodeViewWrapper component for your node view.')\n    }\n\n    return this.renderer.element as HTMLElement\n  }\n\n  /**\n   * Return the content DOM element.\n   * This is the element that will be used to display the rich-text content of the node.\n   */\n  get contentDOM() {\n    if (this.node.isLeaf) {\n      return null\n    }\n\n    return this.contentDOMElement\n  }\n\n  /**\n   * On editor selection update, check if the node is selected.\n   * If it is, call `selectNode`, otherwise call `deselectNode`.\n   */\n  handleSelectionUpdate() {\n    const { from, to } = this.editor.state.selection\n    const pos = this.getPos()\n\n    if (typeof pos !== 'number') {\n      return\n    }\n\n    if (from <= pos && to >= pos + this.node.nodeSize) {\n      if (this.renderer.props.selected) {\n        return\n      }\n\n      this.selectNode()\n    } else {\n      if (!this.renderer.props.selected) {\n        return\n      }\n\n      this.deselectNode()\n    }\n  }\n\n  /**\n   * On update, update the React component.\n   * To prevent unnecessary updates, the `update` option can be used.\n   */\n  update(node: Node, decorations: readonly Decoration[], innerDecorations: DecorationSource): boolean {\n    const rerenderComponent = (props?: Record<string, any>) => {\n      this.renderer.updateProps(props)\n      if (typeof this.options.attrs === 'function') {\n        this.updateElementAttributes()\n      }\n    }\n\n    if (node.type !== this.node.type) {\n      return false\n    }\n\n    if (typeof this.options.update === 'function') {\n      const oldNode = this.node\n      const oldDecorations = this.decorations\n      const oldInnerDecorations = this.innerDecorations\n\n      this.node = node\n      this.decorations = decorations\n      this.innerDecorations = innerDecorations\n\n      return this.options.update({\n        oldNode,\n        oldDecorations,\n        newNode: node,\n        newDecorations: decorations,\n        oldInnerDecorations,\n        innerDecorations,\n        updateProps: () => rerenderComponent({ node, decorations, innerDecorations }),\n      })\n    }\n\n    if (node === this.node && this.decorations === decorations && this.innerDecorations === innerDecorations) {\n      return true\n    }\n\n    this.node = node\n    this.decorations = decorations\n    this.innerDecorations = innerDecorations\n\n    rerenderComponent({ node, decorations, innerDecorations })\n\n    return true\n  }\n\n  /**\n   * Select the node.\n   * Add the `selected` prop and the `ProseMirror-selectednode` class.\n   */\n  selectNode() {\n    this.renderer.updateProps({\n      selected: true,\n    })\n    this.renderer.element.classList.add('ProseMirror-selectednode')\n  }\n\n  /**\n   * Deselect the node.\n   * Remove the `selected` prop and the `ProseMirror-selectednode` class.\n   */\n  deselectNode() {\n    this.renderer.updateProps({\n      selected: false,\n    })\n    this.renderer.element.classList.remove('ProseMirror-selectednode')\n  }\n\n  /**\n   * Destroy the React component instance.\n   */\n  destroy() {\n    this.renderer.destroy()\n    this.editor.off('selectionUpdate', this.handleSelectionUpdate)\n    this.contentDOMElement = null\n  }\n\n  /**\n   * Update the attributes of the top-level element that holds the React component.\n   * Applying the attributes defined in the `attrs` option.\n   */\n  updateElementAttributes() {\n    if (this.options.attrs) {\n      let attrsObj: Record<string, string> = {}\n\n      if (typeof this.options.attrs === 'function') {\n        const extensionAttributes = this.editor.extensionManager.attributes\n        const HTMLAttributes = getRenderedAttributes(this.node, extensionAttributes)\n\n        attrsObj = this.options.attrs({ node: this.node, HTMLAttributes })\n      } else {\n        attrsObj = this.options.attrs\n      }\n\n      this.renderer.updateAttributes(attrsObj)\n    }\n  }\n}\n\n/**\n * Create a React node view renderer.\n */\nexport function ReactNodeViewRenderer<T = HTMLElement>(\n  component: ComponentType<ReactNodeViewProps<T>>,\n  options?: Partial<ReactNodeViewRendererOptions>,\n): NodeViewRenderer {\n  return props => {\n    // try to get the parent component\n    // this is important for vue devtools to show the component hierarchy correctly\n    // maybe it’s `undefined` because <editor-content> isn’t rendered yet\n    if (!(props.editor as EditorWithContentComponent).contentComponent) {\n      return {} as unknown as ProseMirrorNodeView\n    }\n\n    return new ReactNodeView<T>(component, props, options)\n  }\n}\n","export * from './Context.js'\nexport * from './EditorContent.js'\nexport * from './NodeViewContent.js'\nexport * from './NodeViewWrapper.js'\nexport * from './ReactMarkViewRenderer.js'\nexport * from './ReactNodeViewRenderer.js'\nexport * from './ReactRenderer.js'\nexport * from './types.js'\nexport * from './useEditor.js'\nexport * from './useEditorState.js'\nexport * from './useReactNodeView.js'\nexport * from '@tiptap/core'\n"],"names":["useDebugValue","useEffect","useState","useSyncExternalStore","useState","useSyncExternalStore","useDebugValue","useEffect","jsx","jsxs","createContext","useContext","jsx","React","jsx","React","React","jsx","jsx","React","componentProps","createElement","jsx","createElement"],"mappings":"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","debugId":null}},
    {"offset": {"line": 1214, "column": 0}, "map": {"version":3,"sources":["file:///D:/masterji/node_modules/%40tiptap/extension-blockquote/src/blockquote.tsx","file:///D:/masterji/node_modules/%40tiptap/extension-blockquote/src/index.ts"],"sourcesContent":["/** @jsxImportSource @tiptap/core */\nimport { mergeAttributes, Node, wrappingInputRule } from '@tiptap/core'\n\nexport interface BlockquoteOptions {\n  /**\n   * HTML attributes to add to the blockquote element\n   * @default {}\n   * @example { class: 'foo' }\n   */\n  HTMLAttributes: Record<string, any>\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    blockQuote: {\n      /**\n       * Set a blockquote node\n       */\n      setBlockquote: () => ReturnType\n      /**\n       * Toggle a blockquote node\n       */\n      toggleBlockquote: () => ReturnType\n      /**\n       * Unset a blockquote node\n       */\n      unsetBlockquote: () => ReturnType\n    }\n  }\n}\n\n/**\n * Matches a blockquote to a `>` as input.\n */\nexport const inputRegex = /^\\s*>\\s$/\n\n/**\n * This extension allows you to create blockquotes.\n * @see https://tiptap.dev/api/nodes/blockquote\n */\nexport const Blockquote = Node.create<BlockquoteOptions>({\n  name: 'blockquote',\n\n  addOptions() {\n    return {\n      HTMLAttributes: {},\n    }\n  },\n\n  content: 'block+',\n\n  group: 'block',\n\n  defining: true,\n\n  parseHTML() {\n    return [{ tag: 'blockquote' }]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return (\n      <blockquote {...mergeAttributes(this.options.HTMLAttributes, HTMLAttributes)}>\n        <slot />\n      </blockquote>\n    )\n  },\n\n  addCommands() {\n    return {\n      setBlockquote:\n        () =>\n        ({ commands }) => {\n          return commands.wrapIn(this.name)\n        },\n      toggleBlockquote:\n        () =>\n        ({ commands }) => {\n          return commands.toggleWrap(this.name)\n        },\n      unsetBlockquote:\n        () =>\n        ({ commands }) => {\n          return commands.lift(this.name)\n        },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-Shift-b': () => this.editor.commands.toggleBlockquote(),\n    }\n  },\n\n  addInputRules() {\n    return [\n      wrappingInputRule({\n        find: inputRegex,\n        type: this.type,\n      }),\n    ]\n  },\n})\n","import { Blockquote } from './blockquote.jsx'\n\nexport * from './blockquote.jsx'\n\nexport default Blockquote\n"],"names":[],"mappings":";;;;;;AACA,SAAS,iBAAiB,MAAM,yBAAyB;AA6DjD;;;AA5BD,IAAM,aAAa;AAMnB,IAAM,kKAAa,OAAA,CAAK,MAAA,CAA0B;IACvD,MAAM;IAEN,aAAa;QACX,OAAO;YACL,gBAAgB,CAAC;QACnB;IACF;IAEA,SAAS;IAET,OAAO;IAEP,UAAU;IAEV,YAAY;QACV,OAAO;YAAC;gBAAE,KAAK;YAAa,CAAC;SAAA;IAC/B;IAEA,iBAA4B;cAAf,cAAA,CAAe,CAAA,EAAG,CAApB;QACT,OACE,aAAA,GAAA,CAAA,GAAA,+KAAA,CAAA,MAAA,EAAC,cAAA;YAAY,4JAAG,kBAAA,EAAgB,IAAA,CAAK,OAAA,CAAQ,cAAA,EAAgB,cAAc,CAAA;YACzE,UAAA,aAAA,GAAA,CAAA,GAAA,+KAAA,CAAA,MAAA,EAAC,QAAA,CAAA,CAAK;QAAA,CACR;IAEJ;IAEA,cAAc;QACZ,OAAO;YACL,eACE,IACA;wBAAC,EAAE,QAAA,CAAS,CAAA,KAAM;oBAChB,OAAO,SAAS,MAAA,CAAO,IAAA,CAAK,IAAI;gBAClC;YACF,kBACE,IACA;wBAAC,EAAE,QAAA,CAAS,CAAA,KAAM;oBAChB,OAAO,SAAS,UAAA,CAAW,IAAA,CAAK,IAAI;gBACtC;YACF,iBACE,IACA;wBAAC,EAAE,QAAA,CAAS,CAAA,KAAM;oBAChB,OAAO,SAAS,IAAA,CAAK,IAAA,CAAK,IAAI;gBAChC;QACJ;IACF;IAEA,uBAAuB;QACrB,OAAO;YACL,eAAe,IAAM,IAAA,CAAK,MAAA,CAAO,QAAA,CAAS,gBAAA,CAAiB;QAC7D;IACF;IAEA,gBAAgB;QACd,OAAO;qKACL,oBAAA,EAAkB;gBAChB,MAAM;gBACN,MAAM,IAAA,CAAK,IAAA;YACb,CAAC;SACH;IACF;AACF,CAAC;;ACjGD,IAAO,gBAAQ","debugId":null}},
    {"offset": {"line": 1287, "column": 0}, "map": {"version":3,"sources":["file:///D:/masterji/node_modules/%40tiptap/extension-bold/src/bold.tsx","file:///D:/masterji/node_modules/%40tiptap/extension-bold/src/index.ts"],"sourcesContent":["/** @jsxImportSource @tiptap/core */\nimport { Mark, markInputRule, markPasteRule, mergeAttributes } from '@tiptap/core'\n\nexport interface BoldOptions {\n  /**\n   * HTML attributes to add to the bold element.\n   * @default {}\n   * @example { class: 'foo' }\n   */\n  HTMLAttributes: Record<string, any>\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    bold: {\n      /**\n       * Set a bold mark\n       */\n      setBold: () => ReturnType\n      /**\n       * Toggle a bold mark\n       */\n      toggleBold: () => ReturnType\n      /**\n       * Unset a bold mark\n       */\n      unsetBold: () => ReturnType\n    }\n  }\n}\n\n/**\n * Matches bold text via `**` as input.\n */\nexport const starInputRegex = /(?:^|\\s)(\\*\\*(?!\\s+\\*\\*)((?:[^*]+))\\*\\*(?!\\s+\\*\\*))$/\n\n/**\n * Matches bold text via `**` while pasting.\n */\nexport const starPasteRegex = /(?:^|\\s)(\\*\\*(?!\\s+\\*\\*)((?:[^*]+))\\*\\*(?!\\s+\\*\\*))/g\n\n/**\n * Matches bold text via `__` as input.\n */\nexport const underscoreInputRegex = /(?:^|\\s)(__(?!\\s+__)((?:[^_]+))__(?!\\s+__))$/\n\n/**\n * Matches bold text via `__` while pasting.\n */\nexport const underscorePasteRegex = /(?:^|\\s)(__(?!\\s+__)((?:[^_]+))__(?!\\s+__))/g\n\n/**\n * This extension allows you to mark text as bold.\n * @see https://tiptap.dev/api/marks/bold\n */\nexport const Bold = Mark.create<BoldOptions>({\n  name: 'bold',\n\n  addOptions() {\n    return {\n      HTMLAttributes: {},\n    }\n  },\n\n  parseHTML() {\n    return [\n      {\n        tag: 'strong',\n      },\n      {\n        tag: 'b',\n        getAttrs: node => (node as HTMLElement).style.fontWeight !== 'normal' && null,\n      },\n      {\n        style: 'font-weight=400',\n        clearMark: mark => mark.type.name === this.name,\n      },\n      {\n        style: 'font-weight',\n        getAttrs: value => /^(bold(er)?|[5-9]\\d{2,})$/.test(value as string) && null,\n      },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return (\n      <strong {...mergeAttributes(this.options.HTMLAttributes, HTMLAttributes)}>\n        <slot />\n      </strong>\n    )\n  },\n\n  addCommands() {\n    return {\n      setBold:\n        () =>\n        ({ commands }) => {\n          return commands.setMark(this.name)\n        },\n      toggleBold:\n        () =>\n        ({ commands }) => {\n          return commands.toggleMark(this.name)\n        },\n      unsetBold:\n        () =>\n        ({ commands }) => {\n          return commands.unsetMark(this.name)\n        },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-b': () => this.editor.commands.toggleBold(),\n      'Mod-B': () => this.editor.commands.toggleBold(),\n    }\n  },\n\n  addInputRules() {\n    return [\n      markInputRule({\n        find: starInputRegex,\n        type: this.type,\n      }),\n      markInputRule({\n        find: underscoreInputRegex,\n        type: this.type,\n      }),\n    ]\n  },\n\n  addPasteRules() {\n    return [\n      markPasteRule({\n        find: starPasteRegex,\n        type: this.type,\n      }),\n      markPasteRule({\n        find: underscorePasteRegex,\n        type: this.type,\n      }),\n    ]\n  },\n})\n","import { Bold } from './bold.jsx'\n\nexport * from './bold.jsx'\n\nexport default Bold\n"],"names":[],"mappings":";;;;;;;;;AACA,SAAS,MAAM,eAAe,eAAe,uBAAuB;AAsF5D;;;AArDD,IAAM,iBAAiB;AAKvB,IAAM,iBAAiB;AAKvB,IAAM,uBAAuB;AAK7B,IAAM,uBAAuB;AAM7B,IAAM,4JAAO,OAAA,CAAK,MAAA,CAAoB;IAC3C,MAAM;IAEN,aAAa;QACX,OAAO;YACL,gBAAgB,CAAC;QACnB;IACF;IAEA,YAAY;QACV,OAAO;YACL;gBACE,KAAK;YACP;YACA;gBACE,KAAK;gBACL,UAAU,CAAA,OAAS,KAAqB,KAAA,CAAM,UAAA,KAAe,YAAY;YAC3E;YACA;gBACE,OAAO;gBACP,WAAW,CAAA,OAAQ,KAAK,IAAA,CAAK,IAAA,KAAS,IAAA,CAAK,IAAA;YAC7C;YACA;gBACE,OAAO;gBACP,UAAU,CAAA,QAAS,4BAA4B,IAAA,CAAK,KAAe,KAAK;YAC1E;SACF;IACF;IAEA,YAAW,KAAiB,EAAG;cAAlB,cAAA,CAAe,CAAA;QAC1B,OACE,aAAA,GAAA,CAAA,GAAA,+KAAA,CAAA,MAAA,EAAC,UAAA;YAAQ,IAAG,0KAAA,EAAgB,IAAA,CAAK,OAAA,CAAQ,cAAA,EAAgB,cAAc,CAAA;YACrE,UAAA,aAAA,GAAA,CAAA,GAAA,+KAAA,CAAA,MAAA,EAAC,QAAA,CAAA,CAAK;QAAA,CACR;IAEJ;IAEA,cAAc;QACZ,OAAO;YACL,SACE,IACA;wBAAC,EAAE,QAAA,CAAS,CAAA,KAAM;oBAChB,OAAO,SAAS,OAAA,CAAQ,IAAA,CAAK,IAAI;gBACnC;YACF,YACE,IACA;wBAAC,EAAE,QAAA,CAAS,CAAA,KAAM;oBAChB,OAAO,SAAS,UAAA,CAAW,IAAA,CAAK,IAAI;gBACtC;YACF,WACE,IACA;wBAAC,EAAE,QAAA,CAAS,CAAA,KAAM;oBAChB,OAAO,SAAS,SAAA,CAAU,IAAA,CAAK,IAAI;gBACrC;QACJ;IACF;IAEA,uBAAuB;QACrB,OAAO;YACL,SAAS,IAAM,IAAA,CAAK,MAAA,CAAO,QAAA,CAAS,UAAA,CAAW;YAC/C,SAAS,IAAM,IAAA,CAAK,MAAA,CAAO,QAAA,CAAS,UAAA,CAAW;QACjD;IACF;IAEA,gBAAgB;QACd,OAAO;qKACL,gBAAA,EAAc;gBACZ,MAAM;gBACN,MAAM,IAAA,CAAK,IAAA;YACb,CAAC;aACD,wKAAA,EAAc;gBACZ,MAAM;gBACN,MAAM,IAAA,CAAK,IAAA;YACb,CAAC;SACH;IACF;IAEA,gBAAgB;QACd,OAAO;qKACL,gBAAA,EAAc;gBACZ,MAAM;gBACN,MAAM,IAAA,CAAK,IAAA;YACb,CAAC;qKACD,gBAAA,EAAc;gBACZ,MAAM;gBACN,MAAM,IAAA,CAAK,IAAA;YACb,CAAC;SACH;IACF;AACF,CAAC;;AC5ID,IAAO,gBAAQ","debugId":null}},
    {"offset": {"line": 1392, "column": 0}, "map": {"version":3,"sources":["file:///D:/masterji/node_modules/%40tiptap/extension-code/src/code.ts","file:///D:/masterji/node_modules/%40tiptap/extension-code/src/index.ts"],"sourcesContent":["import { Mark, markInputRule, markPasteRule, mergeAttributes } from '@tiptap/core'\n\nexport interface CodeOptions {\n  /**\n   * The HTML attributes applied to the code element.\n   * @default {}\n   * @example { class: 'foo' }\n   */\n  HTMLAttributes: Record<string, any>\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    code: {\n      /**\n       * Set a code mark\n       */\n      setCode: () => ReturnType\n      /**\n       * Toggle inline code\n       */\n      toggleCode: () => ReturnType\n      /**\n       * Unset a code mark\n       */\n      unsetCode: () => ReturnType\n    }\n  }\n}\n\n/**\n * Regular expressions to match inline code blocks enclosed in backticks.\n *  It matches:\n *     - An opening backtick, followed by\n *     - Any text that doesn't include a backtick (captured for marking), followed by\n *     - A closing backtick.\n *  This ensures that any text between backticks is formatted as code,\n *  regardless of the surrounding characters (exception being another backtick).\n */\nexport const inputRegex = /(^|[^`])`([^`]+)`(?!`)/\n\n/**\n * Matches inline code while pasting.\n */\nexport const pasteRegex = /(^|[^`])`([^`]+)`(?!`)/g\n\n/**\n * This extension allows you to mark text as inline code.\n * @see https://tiptap.dev/api/marks/code\n */\nexport const Code = Mark.create<CodeOptions>({\n  name: 'code',\n\n  addOptions() {\n    return {\n      HTMLAttributes: {},\n    }\n  },\n\n  excludes: '_',\n\n  code: true,\n\n  exitable: true,\n\n  parseHTML() {\n    return [{ tag: 'code' }]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['code', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addCommands() {\n    return {\n      setCode:\n        () =>\n        ({ commands }) => {\n          return commands.setMark(this.name)\n        },\n      toggleCode:\n        () =>\n        ({ commands }) => {\n          return commands.toggleMark(this.name)\n        },\n      unsetCode:\n        () =>\n        ({ commands }) => {\n          return commands.unsetMark(this.name)\n        },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-e': () => this.editor.commands.toggleCode(),\n    }\n  },\n\n  addInputRules() {\n    return [\n      markInputRule({\n        find: inputRegex,\n        type: this.type,\n      }),\n    ]\n  },\n\n  addPasteRules() {\n    return [\n      markPasteRule({\n        find: pasteRegex,\n        type: this.type,\n      }),\n    ]\n  },\n})\n","import { Code } from './code.js'\n\nexport * from './code.js'\n\nexport default Code\n"],"names":[],"mappings":";;;;;;;AAAA,SAAS,MAAM,eAAe,eAAe,uBAAuB;;AAuC7D,IAAM,aAAa;AAKnB,IAAM,aAAa;AAMnB,IAAM,4JAAO,OAAA,CAAK,MAAA,CAAoB;IAC3C,MAAM;IAEN,aAAa;QACX,OAAO;YACL,gBAAgB,CAAC;QACnB;IACF;IAEA,UAAU;IAEV,MAAM;IAEN,UAAU;IAEV,YAAY;QACV,OAAO;YAAC;gBAAE,KAAK;YAAO,CAAC;SAAA;IACzB;IAEA,iBAA4B;cAAf,cAAA,CAAe,CAAA,EAAG,CAApB;QACT,OAAO;YAAC;YAAQ,2KAAA,EAAgB,IAAA,CAAK,OAAA,CAAQ,cAAA,EAAgB,cAAc;YAAG,CAAC;SAAA;IACjF;IAEA,cAAc;QACZ,OAAO;YACL,SACE,IACA;wBAAC,EAAE,QAAA,CAAS,CAAA,KAAM;oBAChB,OAAO,SAAS,OAAA,CAAQ,IAAA,CAAK,IAAI;gBACnC;YACF,YACE,IACA;wBAAC,EAAE,QAAA,CAAS,CAAA,KAAM;oBAChB,OAAO,SAAS,UAAA,CAAW,IAAA,CAAK,IAAI;gBACtC;YACF,WACE,IACA;wBAAC,EAAE,QAAA,CAAS,CAAA,KAAM;oBAChB,OAAO,SAAS,SAAA,CAAU,IAAA,CAAK,IAAI;gBACrC;QACJ;IACF;IAEA,uBAAuB;QACrB,OAAO;YACL,SAAS,IAAM,IAAA,CAAK,MAAA,CAAO,QAAA,CAAS,UAAA,CAAW;QACjD;IACF;IAEA,gBAAgB;QACd,OAAO;qKACL,gBAAA,EAAc;gBACZ,MAAM;gBACN,MAAM,IAAA,CAAK,IAAA;YACb,CAAC;SACH;IACF;IAEA,gBAAgB;QACd,OAAO;qKACL,gBAAA,EAAc;gBACZ,MAAM;gBACN,MAAM,IAAA,CAAK,IAAA;YACb,CAAC;SACH;IACF;AACF,CAAC;;AChHD,IAAO,gBAAQ","debugId":null}},
    {"offset": {"line": 1474, "column": 0}, "map": {"version":3,"sources":["file:///D:/masterji/node_modules/%40tiptap/extension-code-block/src/code-block.ts","file:///D:/masterji/node_modules/%40tiptap/extension-code-block/src/index.ts"],"sourcesContent":["import { mergeAttributes, Node, textblockTypeInputRule } from '@tiptap/core'\nimport { Plugin, PluginKey, Selection, TextSelection } from '@tiptap/pm/state'\n\nexport interface CodeBlockOptions {\n  /**\n   * Adds a prefix to language classes that are applied to code tags.\n   * @default 'language-'\n   */\n  languageClassPrefix: string\n  /**\n   * Define whether the node should be exited on triple enter.\n   * @default true\n   */\n  exitOnTripleEnter: boolean\n  /**\n   * Define whether the node should be exited on arrow down if there is no node after it.\n   * @default true\n   */\n  exitOnArrowDown: boolean\n  /**\n   * The default language.\n   * @default null\n   * @example 'js'\n   */\n  defaultLanguage: string | null | undefined\n  /**\n   * Custom HTML attributes that should be added to the rendered HTML tag.\n   * @default {}\n   * @example { class: 'foo' }\n   */\n  HTMLAttributes: Record<string, any>\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    codeBlock: {\n      /**\n       * Set a code block\n       * @param attributes Code block attributes\n       * @example editor.commands.setCodeBlock({ language: 'javascript' })\n       */\n      setCodeBlock: (attributes?: { language: string }) => ReturnType\n      /**\n       * Toggle a code block\n       * @param attributes Code block attributes\n       * @example editor.commands.toggleCodeBlock({ language: 'javascript' })\n       */\n      toggleCodeBlock: (attributes?: { language: string }) => ReturnType\n    }\n  }\n}\n\n/**\n * Matches a code block with backticks.\n */\nexport const backtickInputRegex = /^```([a-z]+)?[\\s\\n]$/\n\n/**\n * Matches a code block with tildes.\n */\nexport const tildeInputRegex = /^~~~([a-z]+)?[\\s\\n]$/\n\n/**\n * This extension allows you to create code blocks.\n * @see https://tiptap.dev/api/nodes/code-block\n */\nexport const CodeBlock = Node.create<CodeBlockOptions>({\n  name: 'codeBlock',\n\n  addOptions() {\n    return {\n      languageClassPrefix: 'language-',\n      exitOnTripleEnter: true,\n      exitOnArrowDown: true,\n      defaultLanguage: null,\n      HTMLAttributes: {},\n    }\n  },\n\n  content: 'text*',\n\n  marks: '',\n\n  group: 'block',\n\n  code: true,\n\n  defining: true,\n\n  addAttributes() {\n    return {\n      language: {\n        default: this.options.defaultLanguage,\n        parseHTML: element => {\n          const { languageClassPrefix } = this.options\n          const classNames = [...(element.firstElementChild?.classList || [])]\n          const languages = classNames\n            .filter(className => className.startsWith(languageClassPrefix))\n            .map(className => className.replace(languageClassPrefix, ''))\n          const language = languages[0]\n\n          if (!language) {\n            return null\n          }\n\n          return language\n        },\n        rendered: false,\n      },\n    }\n  },\n\n  parseHTML() {\n    return [\n      {\n        tag: 'pre',\n        preserveWhitespace: 'full',\n      },\n    ]\n  },\n\n  renderHTML({ node, HTMLAttributes }) {\n    return [\n      'pre',\n      mergeAttributes(this.options.HTMLAttributes, HTMLAttributes),\n      [\n        'code',\n        {\n          class: node.attrs.language ? this.options.languageClassPrefix + node.attrs.language : null,\n        },\n        0,\n      ],\n    ]\n  },\n\n  addCommands() {\n    return {\n      setCodeBlock:\n        attributes =>\n        ({ commands }) => {\n          return commands.setNode(this.name, attributes)\n        },\n      toggleCodeBlock:\n        attributes =>\n        ({ commands }) => {\n          return commands.toggleNode(this.name, 'paragraph', attributes)\n        },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-Alt-c': () => this.editor.commands.toggleCodeBlock(),\n\n      // remove code block when at start of document or code block is empty\n      Backspace: () => {\n        const { empty, $anchor } = this.editor.state.selection\n        const isAtStart = $anchor.pos === 1\n\n        if (!empty || $anchor.parent.type.name !== this.name) {\n          return false\n        }\n\n        if (isAtStart || !$anchor.parent.textContent.length) {\n          return this.editor.commands.clearNodes()\n        }\n\n        return false\n      },\n\n      // exit node on triple enter\n      Enter: ({ editor }) => {\n        if (!this.options.exitOnTripleEnter) {\n          return false\n        }\n\n        const { state } = editor\n        const { selection } = state\n        const { $from, empty } = selection\n\n        if (!empty || $from.parent.type !== this.type) {\n          return false\n        }\n\n        const isAtEnd = $from.parentOffset === $from.parent.nodeSize - 2\n        const endsWithDoubleNewline = $from.parent.textContent.endsWith('\\n\\n')\n\n        if (!isAtEnd || !endsWithDoubleNewline) {\n          return false\n        }\n\n        return editor\n          .chain()\n          .command(({ tr }) => {\n            tr.delete($from.pos - 2, $from.pos)\n\n            return true\n          })\n          .exitCode()\n          .run()\n      },\n\n      // exit node on arrow down\n      ArrowDown: ({ editor }) => {\n        if (!this.options.exitOnArrowDown) {\n          return false\n        }\n\n        const { state } = editor\n        const { selection, doc } = state\n        const { $from, empty } = selection\n\n        if (!empty || $from.parent.type !== this.type) {\n          return false\n        }\n\n        const isAtEnd = $from.parentOffset === $from.parent.nodeSize - 2\n\n        if (!isAtEnd) {\n          return false\n        }\n\n        const after = $from.after()\n\n        if (after === undefined) {\n          return false\n        }\n\n        const nodeAfter = doc.nodeAt(after)\n\n        if (nodeAfter) {\n          return editor.commands.command(({ tr }) => {\n            tr.setSelection(Selection.near(doc.resolve(after)))\n            return true\n          })\n        }\n\n        return editor.commands.exitCode()\n      },\n    }\n  },\n\n  addInputRules() {\n    return [\n      textblockTypeInputRule({\n        find: backtickInputRegex,\n        type: this.type,\n        getAttributes: match => ({\n          language: match[1],\n        }),\n      }),\n      textblockTypeInputRule({\n        find: tildeInputRegex,\n        type: this.type,\n        getAttributes: match => ({\n          language: match[1],\n        }),\n      }),\n    ]\n  },\n\n  addProseMirrorPlugins() {\n    return [\n      // this plugin creates a code block for pasted content from VS Code\n      // we can also detect the copied code language\n      new Plugin({\n        key: new PluginKey('codeBlockVSCodeHandler'),\n        props: {\n          handlePaste: (view, event) => {\n            if (!event.clipboardData) {\n              return false\n            }\n\n            // don’t create a new code block within code blocks\n            if (this.editor.isActive(this.type.name)) {\n              return false\n            }\n\n            const text = event.clipboardData.getData('text/plain')\n            const vscode = event.clipboardData.getData('vscode-editor-data')\n            const vscodeData = vscode ? JSON.parse(vscode) : undefined\n            const language = vscodeData?.mode\n\n            if (!text || !language) {\n              return false\n            }\n\n            const { tr, schema } = view.state\n\n            // prepare a text node\n            // strip carriage return chars from text pasted as code\n            // see: https://github.com/ProseMirror/prosemirror-view/commit/a50a6bcceb4ce52ac8fcc6162488d8875613aacd\n            const textNode = schema.text(text.replace(/\\r\\n?/g, '\\n'))\n\n            // create a code block with the text node\n            // replace selection with the code block\n            tr.replaceSelectionWith(this.type.create({ language }, textNode))\n\n            if (tr.selection.$from.parent.type !== this.type) {\n              // put cursor inside the newly created code block\n              tr.setSelection(TextSelection.near(tr.doc.resolve(Math.max(0, tr.selection.from - 2))))\n            }\n\n            // store meta information\n            // this is useful for other plugins that depends on the paste event\n            // like the paste rule plugin\n            tr.setMeta('paste', true)\n\n            view.dispatch(tr)\n\n            return true\n          },\n        },\n      }),\n    ]\n  },\n})\n","import { CodeBlock } from './code-block.js'\n\nexport * from './code-block.js'\n\nexport default CodeBlock\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1693, "column": 0}, "map": {"version":3,"sources":["file:///D:/masterji/node_modules/%40tiptap/extension-document/src/document.ts","file:///D:/masterji/node_modules/%40tiptap/extension-document/src/index.ts"],"sourcesContent":["import { Node } from '@tiptap/core'\n\n/**\n * The default document node which represents the top level node of the editor.\n * @see https://tiptap.dev/api/nodes/document\n */\nexport const Document = Node.create({\n  name: 'doc',\n  topNode: true,\n  content: 'block+',\n})\n","import { Document } from './document.js'\n\nexport * from './document.js'\n\nexport default Document\n"],"names":[],"mappings":";;;;;AAAA,SAAS,YAAY;;AAMd,IAAM,gKAAW,OAAA,CAAK,MAAA,CAAO;IAClC,MAAM;IACN,SAAS;IACT,SAAS;AACX,CAAC;;ACND,IAAO,gBAAQ","debugId":null}},
    {"offset": {"line": 1713, "column": 0}, "map": {"version":3,"sources":["file:///D:/masterji/node_modules/%40tiptap/extension-hard-break/src/hard-break.ts","file:///D:/masterji/node_modules/%40tiptap/extension-hard-break/src/index.ts"],"sourcesContent":["import { mergeAttributes, Node } from '@tiptap/core'\n\nexport interface HardBreakOptions {\n  /**\n   * Controls if marks should be kept after being split by a hard break.\n   * @default true\n   * @example false\n   */\n  keepMarks: boolean\n\n  /**\n   * HTML attributes to add to the hard break element.\n   * @default {}\n   * @example { class: 'foo' }\n   */\n  HTMLAttributes: Record<string, any>\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    hardBreak: {\n      /**\n       * Add a hard break\n       * @example editor.commands.setHardBreak()\n       */\n      setHardBreak: () => ReturnType\n    }\n  }\n}\n\n/**\n * This extension allows you to insert hard breaks.\n * @see https://www.tiptap.dev/api/nodes/hard-break\n */\nexport const HardBreak = Node.create<HardBreakOptions>({\n  name: 'hardBreak',\n\n  addOptions() {\n    return {\n      keepMarks: true,\n      HTMLAttributes: {},\n    }\n  },\n\n  inline: true,\n\n  group: 'inline',\n\n  selectable: false,\n\n  linebreakReplacement: true,\n\n  parseHTML() {\n    return [{ tag: 'br' }]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['br', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes)]\n  },\n\n  renderText() {\n    return '\\n'\n  },\n\n  addCommands() {\n    return {\n      setHardBreak:\n        () =>\n        ({ commands, chain, state, editor }) => {\n          return commands.first([\n            () => commands.exitCode(),\n            () =>\n              commands.command(() => {\n                const { selection, storedMarks } = state\n\n                if (selection.$from.parent.type.spec.isolating) {\n                  return false\n                }\n\n                const { keepMarks } = this.options\n                const { splittableMarks } = editor.extensionManager\n                const marks = storedMarks || (selection.$to.parentOffset && selection.$from.marks())\n\n                return chain()\n                  .insertContent({ type: this.name })\n                  .command(({ tr, dispatch }) => {\n                    if (dispatch && marks && keepMarks) {\n                      const filteredMarks = marks.filter(mark => splittableMarks.includes(mark.type.name))\n\n                      tr.ensureMarks(filteredMarks)\n                    }\n\n                    return true\n                  })\n                  .run()\n              }),\n          ])\n        },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-Enter': () => this.editor.commands.setHardBreak(),\n      'Shift-Enter': () => this.editor.commands.setHardBreak(),\n    }\n  },\n})\n","import { HardBreak } from './hard-break.js'\n\nexport * from './hard-break.js'\n\nexport default HardBreak\n"],"names":[],"mappings":";;;;;AAAA,SAAS,iBAAiB,YAAY;;AAkC/B,IAAM,iKAAY,OAAA,CAAK,MAAA,CAAyB;IACrD,MAAM;IAEN,aAAa;QACX,OAAO;YACL,WAAW;YACX,gBAAgB,CAAC;QACnB;IACF;IAEA,QAAQ;IAER,OAAO;IAEP,YAAY;IAEZ,sBAAsB;IAEtB,YAAY;QACV,OAAO;YAAC;gBAAE,KAAK;YAAK,CAAC;SAAA;IACvB;IAEA,iBAA4B,EAAG;YAApB,EAAE,cAAA,CAAe,CAAA;QAC1B,OAAO;YAAC;qKAAM,kBAAA,EAAgB,IAAA,CAAK,OAAA,CAAQ,cAAA,EAAgB,cAAc,CAAC;SAAA;IAC5E;IAEA,aAAa;QACX,OAAO;IACT;IAEA,cAAc;QACZ,OAAO;YACL,cACE,IACA;wBAAC,EAAE,QAAA,EAAU,KAAA,EAAO,KAAA,EAAO,MAAA,CAAO,CAAA,KAAM;oBACtC,OAAO,SAAS,KAAA,CAAM;wBACpB,IAAM,SAAS,QAAA,CAAS;wBACxB,IACE,SAAS,OAAA,CAAQ,MAAM;gCACrB,MAAM,EAAE,SAAA,EAAW,WAAA,CAAY,CAAA,GAAI;gCAEnC,IAAI,UAAU,KAAA,CAAM,MAAA,CAAO,IAAA,CAAK,IAAA,CAAK,SAAA,EAAW;oCAC9C,OAAO;gCACT;gCAEA,MAAM,EAAE,SAAA,CAAU,CAAA,GAAI,IAAA,CAAK,OAAA;gCAC3B,MAAM,EAAE,eAAA,CAAgB,CAAA,GAAI,OAAO,gBAAA;gCACnC,MAAM,QAAQ,eAAgB,UAAU,GAAA,CAAI,YAAA,IAAgB,UAAU,KAAA,CAAM,KAAA,CAAM;gCAElF,OAAO,MAAM,EACV,aAAA,CAAc;oCAAE,MAAM,IAAA,CAAK,IAAA;gCAAK,CAAC,EACjC,OAAA,CAAQ;wCAAC,EAAE,EAAA,EAAI,QAAA,CAAS,CAAA,KAAM;oCAC7B,IAAI,YAAY,SAAS,WAAW;wCAClC,MAAM,gBAAgB,MAAM,MAAA,CAAO,CAAA,OAAQ,gBAAgB,QAAA,CAAS,KAAK,IAAA,CAAK,IAAI,CAAC;wCAEnF,GAAG,WAAA,CAAY,aAAa;oCAC9B;oCAEA,OAAO;gCACT,CAAC,EACA,GAAA,CAAI;4BACT,CAAC;qBACJ;gBACH;QACJ;IACF;IAEA,uBAAuB;QACrB,OAAO;YACL,aAAa,IAAM,IAAA,CAAK,MAAA,CAAO,QAAA,CAAS,YAAA,CAAa;YACrD,eAAe,IAAM,IAAA,CAAK,MAAA,CAAO,QAAA,CAAS,YAAA,CAAa;QACzD;IACF;AACF,CAAC;;ACvGD,IAAO,gBAAQ","debugId":null}},
    {"offset": {"line": 1793, "column": 0}, "map": {"version":3,"sources":["file:///D:/masterji/node_modules/%40tiptap/extension-heading/src/heading.ts","file:///D:/masterji/node_modules/%40tiptap/extension-heading/src/index.ts"],"sourcesContent":["import { mergeAttributes, Node, textblockTypeInputRule } from '@tiptap/core'\n\n/**\n * The heading level options.\n */\nexport type Level = 1 | 2 | 3 | 4 | 5 | 6\n\nexport interface HeadingOptions {\n  /**\n   * The available heading levels.\n   * @default [1, 2, 3, 4, 5, 6]\n   * @example [1, 2, 3]\n   */\n  levels: Level[]\n\n  /**\n   * The HTML attributes for a heading node.\n   * @default {}\n   * @example { class: 'foo' }\n   */\n  HTMLAttributes: Record<string, any>\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    heading: {\n      /**\n       * Set a heading node\n       * @param attributes The heading attributes\n       * @example editor.commands.setHeading({ level: 1 })\n       */\n      setHeading: (attributes: { level: Level }) => ReturnType\n      /**\n       * Toggle a heading node\n       * @param attributes The heading attributes\n       * @example editor.commands.toggleHeading({ level: 1 })\n       */\n      toggleHeading: (attributes: { level: Level }) => ReturnType\n    }\n  }\n}\n\n/**\n * This extension allows you to create headings.\n * @see https://www.tiptap.dev/api/nodes/heading\n */\nexport const Heading = Node.create<HeadingOptions>({\n  name: 'heading',\n\n  addOptions() {\n    return {\n      levels: [1, 2, 3, 4, 5, 6],\n      HTMLAttributes: {},\n    }\n  },\n\n  content: 'inline*',\n\n  group: 'block',\n\n  defining: true,\n\n  addAttributes() {\n    return {\n      level: {\n        default: 1,\n        rendered: false,\n      },\n    }\n  },\n\n  parseHTML() {\n    return this.options.levels.map((level: Level) => ({\n      tag: `h${level}`,\n      attrs: { level },\n    }))\n  },\n\n  renderHTML({ node, HTMLAttributes }) {\n    const hasLevel = this.options.levels.includes(node.attrs.level)\n    const level = hasLevel ? node.attrs.level : this.options.levels[0]\n\n    return [`h${level}`, mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addCommands() {\n    return {\n      setHeading:\n        attributes =>\n        ({ commands }) => {\n          if (!this.options.levels.includes(attributes.level)) {\n            return false\n          }\n\n          return commands.setNode(this.name, attributes)\n        },\n      toggleHeading:\n        attributes =>\n        ({ commands }) => {\n          if (!this.options.levels.includes(attributes.level)) {\n            return false\n          }\n\n          return commands.toggleNode(this.name, 'paragraph', attributes)\n        },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return this.options.levels.reduce(\n      (items, level) => ({\n        ...items,\n        ...{\n          [`Mod-Alt-${level}`]: () => this.editor.commands.toggleHeading({ level }),\n        },\n      }),\n      {},\n    )\n  },\n\n  addInputRules() {\n    return this.options.levels.map(level => {\n      return textblockTypeInputRule({\n        find: new RegExp(`^(#{${Math.min(...this.options.levels)},${level}})\\\\s$`),\n        type: this.type,\n        getAttributes: {\n          level,\n        },\n      })\n    })\n  },\n})\n","import { Heading } from './heading.js'\n\nexport * from './heading.js'\n\nexport default Heading\n"],"names":[],"mappings":";;;;;AAAA,SAAS,iBAAiB,MAAM,8BAA8B;;AA8CvD,IAAM,+JAAU,OAAA,CAAK,MAAA,CAAuB;IACjD,MAAM;IAEN,aAAa;QACX,OAAO;YACL,QAAQ;gBAAC;gBAAG;gBAAG;gBAAG;gBAAG;gBAAG,CAAC;aAAA;YACzB,gBAAgB,CAAC;QACnB;IACF;IAEA,SAAS;IAET,OAAO;IAEP,UAAU;IAEV,gBAAgB;QACd,OAAO;YACL,OAAO;gBACL,SAAS;gBACT,UAAU;YACZ;QACF;IACF;IAEA,YAAY;QACV,OAAO,IAAA,CAAK,OAAA,CAAQ,MAAA,CAAO,GAAA,CAAI,CAAC,QAAA,CAAkB;gBAChD,KAAK,IAAS,OAAL,KAAK;gBACd,OAAO;oBAAE;gBAAM;YACjB,CAAA,CAAE;IACJ;IAEA,iBAAkC;cAArB,IAAA,EAAM,cAAA,CAAe,CAAA,EAAG,CAA1B;QACT,MAAM,WAAW,IAAA,CAAK,OAAA,CAAQ,MAAA,CAAO,QAAA,CAAS,KAAK,KAAA,CAAM,KAAK;QAC9D,MAAM,QAAQ,WAAW,KAAK,KAAA,CAAM,KAAA,GAAQ,IAAA,CAAK,OAAA,CAAQ,MAAA,CAAO,CAAC,CAAA;QAEjE,OAAO,CAAC;YAAA,IAAS,OAAL,KAAK;qKAAI,kBAAA,EAAgB,IAAA,CAAK,OAAA,CAAQ,cAAA,EAAgB,cAAc;YAAG,CAAC;SAAA;IACtF;IAEA,cAAc;QACZ,OAAO;YACL,YACE,CAAA,aACA;wBAAC,EAAE,QAAA,CAAS,CAAA,KAAM;oBAChB,IAAI,CAAC,IAAA,CAAK,OAAA,CAAQ,MAAA,CAAO,QAAA,CAAS,WAAW,KAAK,GAAG;wBACnD,OAAO;oBACT;oBAEA,OAAO,SAAS,OAAA,CAAQ,IAAA,CAAK,IAAA,EAAM,UAAU;gBAC/C;YACF,eACE,CAAA,aACA;wBAAC,EAAE,QAAA,CAAS,CAAA,KAAM;oBAChB,IAAI,CAAC,IAAA,CAAK,OAAA,CAAQ,MAAA,CAAO,QAAA,CAAS,WAAW,KAAK,GAAG;wBACnD,OAAO;oBACT;oBAEA,OAAO,SAAS,UAAA,CAAW,IAAA,CAAK,IAAA,EAAM,aAAa,UAAU;gBAC/D;QACJ;IACF;IAEA,uBAAuB;QACrB,OAAO,IAAA,CAAK,OAAA,CAAQ,MAAA,CAAO,MAAA,CACzB,CAAC,OAAO,QAAA,CAAW;gBACjB,GAAG,KAAA;gBACH,GAAG;oBACD,CAAC,WAAgB,CAAE,MAAP,KAAK,EAAE,EAAG,IAAM,IAAA,CAAK,MAAA,CAAO,QAAA,CAAS,aAAA,CAAc;4BAAE;wBAAM,CAAC;gBAC1E,CAAA;YACF,CAAA,GACA,CAAC;IAEL;IAEA,gBAAgB;QACd,OAAO,IAAA,CAAK,OAAA,CAAQ,MAAA,CAAO,GAAA,CAAI,CAAA,UAAS;YACtC,OAAO,kLAAA,EAAuB;gBAC5B,MAAM,IAAI,OAAO,cAAO,KAAK,GAAA,CAAI,GAAG,IAAA,CAAK,OAAA,CAAQ,MAAM,CAAC,EAAA,KAAS,OAAL,KAAK,EAAA,OAAQ;gBACzE,MAAM,IAAA,CAAK,IAAA;gBACX,eAAe;oBACb;gBACF;YACF,CAAC;QACH,CAAC;IACH;AACF,CAAC;;AC/HD,IAAO,gBAAQ","debugId":null}},
    {"offset": {"line": 1892, "column": 0}, "map": {"version":3,"sources":["file:///D:/masterji/node_modules/%40tiptap/extension-horizontal-rule/src/horizontal-rule.ts","file:///D:/masterji/node_modules/%40tiptap/extension-horizontal-rule/src/index.ts"],"sourcesContent":["import { canInsertNode, isNodeSelection, mergeAttributes, Node, nodeInputRule } from '@tiptap/core'\nimport { NodeSelection, TextSelection } from '@tiptap/pm/state'\n\nexport interface HorizontalRuleOptions {\n  /**\n   * The HTML attributes for a horizontal rule node.\n   * @default {}\n   * @example { class: 'foo' }\n   */\n  HTMLAttributes: Record<string, any>\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    horizontalRule: {\n      /**\n       * Add a horizontal rule\n       * @example editor.commands.setHorizontalRule()\n       */\n      setHorizontalRule: () => ReturnType\n    }\n  }\n}\n\n/**\n * This extension allows you to insert horizontal rules.\n * @see https://www.tiptap.dev/api/nodes/horizontal-rule\n */\nexport const HorizontalRule = Node.create<HorizontalRuleOptions>({\n  name: 'horizontalRule',\n\n  addOptions() {\n    return {\n      HTMLAttributes: {},\n    }\n  },\n\n  group: 'block',\n\n  parseHTML() {\n    return [{ tag: 'hr' }]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['hr', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes)]\n  },\n\n  addCommands() {\n    return {\n      setHorizontalRule:\n        () =>\n        ({ chain, state }) => {\n          // Check if we can insert the node at the current selection\n          if (!canInsertNode(state, state.schema.nodes[this.name])) {\n            return false\n          }\n\n          const { selection } = state\n          const { $to: $originTo } = selection\n\n          const currentChain = chain()\n\n          if (isNodeSelection(selection)) {\n            currentChain.insertContentAt($originTo.pos, {\n              type: this.name,\n            })\n          } else {\n            currentChain.insertContent({ type: this.name })\n          }\n\n          return (\n            currentChain\n              // set cursor after horizontal rule\n              .command(({ tr, dispatch }) => {\n                if (dispatch) {\n                  const { $to } = tr.selection\n                  const posAfter = $to.end()\n\n                  if ($to.nodeAfter) {\n                    if ($to.nodeAfter.isTextblock) {\n                      tr.setSelection(TextSelection.create(tr.doc, $to.pos + 1))\n                    } else if ($to.nodeAfter.isBlock) {\n                      tr.setSelection(NodeSelection.create(tr.doc, $to.pos))\n                    } else {\n                      tr.setSelection(TextSelection.create(tr.doc, $to.pos))\n                    }\n                  } else {\n                    // add node after horizontal rule if it’s the end of the document\n                    const node = $to.parent.type.contentMatch.defaultType?.create()\n\n                    if (node) {\n                      tr.insert(posAfter, node)\n                      tr.setSelection(TextSelection.create(tr.doc, posAfter + 1))\n                    }\n                  }\n\n                  tr.scrollIntoView()\n                }\n\n                return true\n              })\n              .run()\n          )\n        },\n    }\n  },\n\n  addInputRules() {\n    return [\n      nodeInputRule({\n        find: /^(?:---|—-|___\\s|\\*\\*\\*\\s)$/,\n        type: this.type,\n      }),\n    ]\n  },\n})\n","import { HorizontalRule } from './horizontal-rule.js'\n\nexport * from './horizontal-rule.js'\n\nexport default HorizontalRule\n"],"names":[],"mappings":";;;;;AAAA,SAAS,eAAe,iBAAiB,iBAAiB,MAAM,qBAAqB;AACrF,SAAS,eAAe,qBAAqB;;;;AA2BtC,IAAM,sKAAiB,OAAA,CAAK,MAAA,CAA8B;IAC/D,MAAM;IAEN,aAAa;QACX,OAAO;YACL,gBAAgB,CAAC;QACnB;IACF;IAEA,OAAO;IAEP,YAAY;QACV,OAAO;YAAC;gBAAE,KAAK;YAAK,CAAC;SAAA;IACvB;IAEA,iBAA4B;cAAf,cAAA,CAAe,CAAA,EAAG,CAApB;QACT,OAAO;YAAC;qKAAM,kBAAA,EAAgB,IAAA,CAAK,OAAA,CAAQ,cAAA,EAAgB,cAAc,CAAC;SAAA;IAC5E;IAEA,cAAc;QACZ,OAAO;YACL,mBACE,IACA;wBAAC,EAAE,KAAA,EAAO,KAAA,CAAM,CAAA,KAAM;oBAEpB,IAAI,KAAC,qKAAA,EAAc,OAAO,MAAM,MAAA,CAAO,KAAA,CAAM,IAAA,CAAK,IAAI,CAAC,GAAG;wBACxD,OAAO;oBACT;oBAEA,MAAM,EAAE,SAAA,CAAU,CAAA,GAAI;oBACtB,MAAM,EAAE,KAAK,SAAA,CAAU,CAAA,GAAI;oBAE3B,MAAM,eAAe,MAAM;oBAE3B,6JAAI,kBAAA,EAAgB,SAAS,GAAG;wBAC9B,aAAa,eAAA,CAAgB,UAAU,GAAA,EAAK;4BAC1C,MAAM,IAAA,CAAK,IAAA;wBACb,CAAC;oBACH,OAAO;wBACL,aAAa,aAAA,CAAc;4BAAE,MAAM,IAAA,CAAK,IAAA;wBAAK,CAAC;oBAChD;oBAEA,OACE,aAEG,OAAA,CAAQ;4BAAC,EAAE,EAAA,EAAI,QAAA,CAAS,CAAA,KAAM;wBAzE7C,IAAA;wBA0EgB,IAAI,UAAU;4BACZ,MAAM,EAAE,GAAA,CAAI,CAAA,GAAI,GAAG,SAAA;4BACnB,MAAM,WAAW,IAAI,GAAA,CAAI;4BAEzB,IAAI,IAAI,SAAA,EAAW;gCACjB,IAAI,IAAI,SAAA,CAAU,WAAA,EAAa;oCAC7B,GAAG,YAAA,0JAAa,gBAAA,CAAc,MAAA,CAAO,GAAG,GAAA,EAAK,IAAI,GAAA,GAAM,CAAC,CAAC;gCAC3D,OAAA,IAAW,IAAI,SAAA,CAAU,OAAA,EAAS;oCAChC,GAAG,YAAA,0JAAa,gBAAA,CAAc,MAAA,CAAO,GAAG,GAAA,EAAK,IAAI,GAAG,CAAC;gCACvD,OAAO;oCACL,GAAG,YAAA,0JAAa,gBAAA,CAAc,MAAA,CAAO,GAAG,GAAA,EAAK,IAAI,GAAG,CAAC;gCACvD;4BACF,OAAO;gCAEL,MAAM,OAAA,CAAO,KAAA,IAAI,MAAA,CAAO,IAAA,CAAK,YAAA,CAAa,WAAA,KAA7B,OAAA,KAAA,IAAA,GAA0C,MAAA;gCAEvD,IAAI,MAAM;oCACR,GAAG,MAAA,CAAO,UAAU,IAAI;oCACxB,GAAG,YAAA,0JAAa,gBAAA,CAAc,MAAA,CAAO,GAAG,GAAA,EAAK,WAAW,CAAC,CAAC;gCAC5D;4BACF;4BAEA,GAAG,cAAA,CAAe;wBACpB;wBAEA,OAAO;oBACT,CAAC,EACA,GAAA,CAAI;gBAEX;QACJ;IACF;IAEA,gBAAgB;QACd,OAAO;qKACL,gBAAA,EAAc;gBACZ,MAAM;gBACN,MAAM,IAAA,CAAK,IAAA;YACb,CAAC;SACH;IACF;AACF,CAAC;;AC/GD,IAAO,gBAAQ","debugId":null}},
    {"offset": {"line": 1988, "column": 0}, "map": {"version":3,"sources":["file:///D:/masterji/node_modules/%40tiptap/extension-italic/src/italic.ts","file:///D:/masterji/node_modules/%40tiptap/extension-italic/src/index.ts"],"sourcesContent":["import { Mark, markInputRule, markPasteRule, mergeAttributes } from '@tiptap/core'\n\nexport interface ItalicOptions {\n  /**\n   * HTML attributes to add to the italic element.\n   * @default {}\n   * @example { class: 'foo' }\n   */\n  HTMLAttributes: Record<string, any>\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    italic: {\n      /**\n       * Set an italic mark\n       * @example editor.commands.setItalic()\n       */\n      setItalic: () => ReturnType\n      /**\n       * Toggle an italic mark\n       * @example editor.commands.toggleItalic()\n       */\n      toggleItalic: () => ReturnType\n      /**\n       * Unset an italic mark\n       * @example editor.commands.unsetItalic()\n       */\n      unsetItalic: () => ReturnType\n    }\n  }\n}\n\n/**\n * Matches an italic to a *italic* on input.\n */\nexport const starInputRegex = /(?:^|\\s)(\\*(?!\\s+\\*)((?:[^*]+))\\*(?!\\s+\\*))$/\n\n/**\n * Matches an italic to a *italic* on paste.\n */\nexport const starPasteRegex = /(?:^|\\s)(\\*(?!\\s+\\*)((?:[^*]+))\\*(?!\\s+\\*))/g\n\n/**\n * Matches an italic to a _italic_ on input.\n */\nexport const underscoreInputRegex = /(?:^|\\s)(_(?!\\s+_)((?:[^_]+))_(?!\\s+_))$/\n\n/**\n * Matches an italic to a _italic_ on paste.\n */\nexport const underscorePasteRegex = /(?:^|\\s)(_(?!\\s+_)((?:[^_]+))_(?!\\s+_))/g\n\n/**\n * This extension allows you to create italic text.\n * @see https://www.tiptap.dev/api/marks/italic\n */\nexport const Italic = Mark.create<ItalicOptions>({\n  name: 'italic',\n\n  addOptions() {\n    return {\n      HTMLAttributes: {},\n    }\n  },\n\n  parseHTML() {\n    return [\n      {\n        tag: 'em',\n      },\n      {\n        tag: 'i',\n        getAttrs: node => (node as HTMLElement).style.fontStyle !== 'normal' && null,\n      },\n      {\n        style: 'font-style=normal',\n        clearMark: mark => mark.type.name === this.name,\n      },\n      {\n        style: 'font-style=italic',\n      },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['em', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addCommands() {\n    return {\n      setItalic:\n        () =>\n        ({ commands }) => {\n          return commands.setMark(this.name)\n        },\n      toggleItalic:\n        () =>\n        ({ commands }) => {\n          return commands.toggleMark(this.name)\n        },\n      unsetItalic:\n        () =>\n        ({ commands }) => {\n          return commands.unsetMark(this.name)\n        },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-i': () => this.editor.commands.toggleItalic(),\n      'Mod-I': () => this.editor.commands.toggleItalic(),\n    }\n  },\n\n  addInputRules() {\n    return [\n      markInputRule({\n        find: starInputRegex,\n        type: this.type,\n      }),\n      markInputRule({\n        find: underscoreInputRegex,\n        type: this.type,\n      }),\n    ]\n  },\n\n  addPasteRules() {\n    return [\n      markPasteRule({\n        find: starPasteRegex,\n        type: this.type,\n      }),\n      markPasteRule({\n        find: underscorePasteRegex,\n        type: this.type,\n      }),\n    ]\n  },\n})\n","import { Italic } from './italic.js'\n\nexport * from './italic.js'\n\nexport default Italic\n"],"names":[],"mappings":";;;;;;;;;AAAA,SAAS,MAAM,eAAe,eAAe,uBAAuB;;AAoC7D,IAAM,iBAAiB;AAKvB,IAAM,iBAAiB;AAKvB,IAAM,uBAAuB;AAK7B,IAAM,uBAAuB;AAM7B,IAAM,8JAAS,OAAA,CAAK,MAAA,CAAsB;IAC/C,MAAM;IAEN,aAAa;QACX,OAAO;YACL,gBAAgB,CAAC;QACnB;IACF;IAEA,YAAY;QACV,OAAO;YACL;gBACE,KAAK;YACP;YACA;gBACE,KAAK;gBACL,UAAU,CAAA,OAAS,KAAqB,KAAA,CAAM,SAAA,KAAc,YAAY;YAC1E;YACA;gBACE,OAAO;gBACP,WAAW,CAAA,OAAQ,KAAK,IAAA,CAAK,IAAA,KAAS,IAAA,CAAK,IAAA;YAC7C;YACA;gBACE,OAAO;YACT;SACF;IACF;IAEA,iBAA4B;cAAf,cAAA,CAAe,CAAA,EAAG,CAApB;QACT,OAAO;YAAC;qKAAM,kBAAA,EAAgB,IAAA,CAAK,OAAA,CAAQ,cAAA,EAAgB,cAAc;YAAG,CAAC;SAAA;IAC/E;IAEA,cAAc;QACZ,OAAO;YACL,WACE,IACA;wBAAC,EAAE,QAAA,CAAS,CAAA,KAAM;oBAChB,OAAO,SAAS,OAAA,CAAQ,IAAA,CAAK,IAAI;gBACnC;YACF,cACE,IACA;wBAAC,EAAE,QAAA,CAAS,CAAA,KAAM;oBAChB,OAAO,SAAS,UAAA,CAAW,IAAA,CAAK,IAAI;gBACtC;YACF,aACE,IACA;wBAAC,EAAE,QAAA,CAAS,CAAA,KAAM;oBAChB,OAAO,SAAS,SAAA,CAAU,IAAA,CAAK,IAAI;gBACrC;QACJ;IACF;IAEA,uBAAuB;QACrB,OAAO;YACL,SAAS,IAAM,IAAA,CAAK,MAAA,CAAO,QAAA,CAAS,YAAA,CAAa;YACjD,SAAS,IAAM,IAAA,CAAK,MAAA,CAAO,QAAA,CAAS,YAAA,CAAa;QACnD;IACF;IAEA,gBAAgB;QACd,OAAO;qKACL,gBAAA,EAAc;gBACZ,MAAM;gBACN,MAAM,IAAA,CAAK,IAAA;YACb,CAAC;qKACD,gBAAA,EAAc;gBACZ,MAAM;gBACN,MAAM,IAAA,CAAK,IAAA;YACb,CAAC;SACH;IACF;IAEA,gBAAgB;QACd,OAAO;qKACL,gBAAA,EAAc;gBACZ,MAAM;gBACN,MAAM,IAAA,CAAK,IAAA;YACb,CAAC;qKACD,gBAAA,EAAc;gBACZ,MAAM;gBACN,MAAM,IAAA,CAAK,IAAA;YACb,CAAC;SACH;IACF;AACF,CAAC;;ACzID,IAAO,gBAAQ","debugId":null}},
    {"offset": {"line": 2091, "column": 0}, "map": {"version":3,"sources":["file:///D:/masterji/node_modules/%40tiptap/extension-link/src/link.ts","file:///D:/masterji/node_modules/%40tiptap/extension-link/src/helpers/autolink.ts","file:///D:/masterji/node_modules/%40tiptap/extension-link/src/helpers/whitespace.ts","file:///D:/masterji/node_modules/%40tiptap/extension-link/src/helpers/clickHandler.ts","file:///D:/masterji/node_modules/%40tiptap/extension-link/src/helpers/pasteHandler.ts","file:///D:/masterji/node_modules/%40tiptap/extension-link/src/index.ts"],"sourcesContent":["import type { PasteRuleMatch } from '@tiptap/core'\nimport { Mark, markPasteRule, mergeAttributes } from '@tiptap/core'\nimport type { Plugin } from '@tiptap/pm/state'\nimport { find, registerCustomProtocol, reset } from 'linkifyjs'\n\nimport { autolink } from './helpers/autolink.js'\nimport { clickHandler } from './helpers/clickHandler.js'\nimport { pasteHandler } from './helpers/pasteHandler.js'\nimport { UNICODE_WHITESPACE_REGEX_GLOBAL } from './helpers/whitespace.js'\n\nexport interface LinkProtocolOptions {\n  /**\n   * The protocol scheme to be registered.\n   * @default '''\n   * @example 'ftp'\n   * @example 'git'\n   */\n  scheme: string\n\n  /**\n   * If enabled, it allows optional slashes after the protocol.\n   * @default false\n   * @example true\n   */\n  optionalSlashes?: boolean\n}\n\nexport const pasteRegex =\n  /https?:\\/\\/(?:www\\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z]{2,}\\b(?:[-a-zA-Z0-9@:%._+~#=?!&/]*)(?:[-a-zA-Z0-9@:%._+~#=?!&/]*)/gi\n\n/**\n * @deprecated The default behavior is now to open links when the editor is not editable.\n */\ntype DeprecatedOpenWhenNotEditable = 'whenNotEditable'\n\nexport interface LinkOptions {\n  /**\n   * If enabled, the extension will automatically add links as you type.\n   * @default true\n   * @example false\n   */\n  autolink: boolean\n\n  /**\n   * An array of custom protocols to be registered with linkifyjs.\n   * @default []\n   * @example ['ftp', 'git']\n   */\n  protocols: Array<LinkProtocolOptions | string>\n\n  /**\n   * Default protocol to use when no protocol is specified.\n   * @default 'http'\n   */\n  defaultProtocol: string\n  /**\n   * If enabled, links will be opened on click.\n   * @default true\n   * @example false\n   */\n  openOnClick: boolean | DeprecatedOpenWhenNotEditable\n  /**\n   * If enabled, the link will be selected when clicked.\n   * @default false\n   * @example true\n   */\n  enableClickSelection: boolean\n  /**\n   * Adds a link to the current selection if the pasted content only contains an url.\n   * @default true\n   * @example false\n   */\n  linkOnPaste: boolean\n\n  /**\n   * HTML attributes to add to the link element.\n   * @default {}\n   * @example { class: 'foo' }\n   */\n  HTMLAttributes: Record<string, any>\n\n  /**\n   * @deprecated Use the `shouldAutoLink` option instead.\n   * A validation function that modifies link verification for the auto linker.\n   * @param url - The url to be validated.\n   * @returns - True if the url is valid, false otherwise.\n   */\n  validate: (url: string) => boolean\n\n  /**\n   * A validation function which is used for configuring link verification for preventing XSS attacks.\n   * Only modify this if you know what you're doing.\n   *\n   * @returns {boolean} `true` if the URL is valid, `false` otherwise.\n   *\n   * @example\n   * isAllowedUri: (url, { defaultValidate, protocols, defaultProtocol }) => {\n   * return url.startsWith('./') || defaultValidate(url)\n   * }\n   */\n  isAllowedUri: (\n    /**\n     * The URL to be validated.\n     */\n    url: string,\n    ctx: {\n      /**\n       * The default validation function.\n       */\n      defaultValidate: (url: string) => boolean\n      /**\n       * An array of allowed protocols for the URL (e.g., \"http\", \"https\"). As defined in the `protocols` option.\n       */\n      protocols: Array<LinkProtocolOptions | string>\n      /**\n       * A string that represents the default protocol (e.g., 'http'). As defined in the `defaultProtocol` option.\n       */\n      defaultProtocol: string\n    },\n  ) => boolean\n\n  /**\n   * Determines whether a valid link should be automatically linked in the content.\n   *\n   * @param {string} url - The URL that has already been validated.\n   * @returns {boolean} - True if the link should be auto-linked; false if it should not be auto-linked.\n   */\n  shouldAutoLink: (url: string) => boolean\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    link: {\n      /**\n       * Set a link mark\n       * @param attributes The link attributes\n       * @example editor.commands.setLink({ href: 'https://tiptap.dev' })\n       */\n      setLink: (attributes: {\n        href: string\n        target?: string | null\n        rel?: string | null\n        class?: string | null\n      }) => ReturnType\n      /**\n       * Toggle a link mark\n       * @param attributes The link attributes\n       * @example editor.commands.toggleLink({ href: 'https://tiptap.dev' })\n       */\n      toggleLink: (attributes?: {\n        href: string\n        target?: string | null\n        rel?: string | null\n        class?: string | null\n      }) => ReturnType\n      /**\n       * Unset a link mark\n       * @example editor.commands.unsetLink()\n       */\n      unsetLink: () => ReturnType\n    }\n  }\n}\n\nexport function isAllowedUri(uri: string | undefined, protocols?: LinkOptions['protocols']) {\n  const allowedProtocols: string[] = ['http', 'https', 'ftp', 'ftps', 'mailto', 'tel', 'callto', 'sms', 'cid', 'xmpp']\n\n  if (protocols) {\n    protocols.forEach(protocol => {\n      const nextProtocol = typeof protocol === 'string' ? protocol : protocol.scheme\n\n      if (nextProtocol) {\n        allowedProtocols.push(nextProtocol)\n      }\n    })\n  }\n\n  return (\n    !uri ||\n    uri.replace(UNICODE_WHITESPACE_REGEX_GLOBAL, '').match(\n      new RegExp(\n        // eslint-disable-next-line no-useless-escape\n        `^(?:(?:${allowedProtocols.join('|')}):|[^a-z]|[a-z0-9+.\\-]+(?:[^a-z+.\\-:]|$))`,\n        'i',\n      ),\n    )\n  )\n}\n\n/**\n * This extension allows you to create links.\n * @see https://www.tiptap.dev/api/marks/link\n */\nexport const Link = Mark.create<LinkOptions>({\n  name: 'link',\n\n  priority: 1000,\n\n  keepOnSplit: false,\n\n  exitable: true,\n\n  onCreate() {\n    if (this.options.validate && !this.options.shouldAutoLink) {\n      // Copy the validate function to the shouldAutoLink option\n      this.options.shouldAutoLink = this.options.validate\n      console.warn('The `validate` option is deprecated. Rename to the `shouldAutoLink` option instead.')\n    }\n    this.options.protocols.forEach(protocol => {\n      if (typeof protocol === 'string') {\n        registerCustomProtocol(protocol)\n        return\n      }\n      registerCustomProtocol(protocol.scheme, protocol.optionalSlashes)\n    })\n  },\n\n  onDestroy() {\n    reset()\n  },\n\n  inclusive() {\n    return this.options.autolink\n  },\n\n  addOptions() {\n    return {\n      openOnClick: true,\n      enableClickSelection: false,\n      linkOnPaste: true,\n      autolink: true,\n      protocols: [],\n      defaultProtocol: 'http',\n      HTMLAttributes: {\n        target: '_blank',\n        rel: 'noopener noreferrer nofollow',\n        class: null,\n      },\n      isAllowedUri: (url, ctx) => !!isAllowedUri(url, ctx.protocols),\n      validate: url => !!url,\n      shouldAutoLink: url => !!url,\n    }\n  },\n\n  addAttributes() {\n    return {\n      href: {\n        default: null,\n        parseHTML(element) {\n          return element.getAttribute('href')\n        },\n      },\n      target: {\n        default: this.options.HTMLAttributes.target,\n      },\n      rel: {\n        default: this.options.HTMLAttributes.rel,\n      },\n      class: {\n        default: this.options.HTMLAttributes.class,\n      },\n    }\n  },\n\n  parseHTML() {\n    return [\n      {\n        tag: 'a[href]',\n        getAttrs: dom => {\n          const href = (dom as HTMLElement).getAttribute('href')\n\n          // prevent XSS attacks\n          if (\n            !href ||\n            !this.options.isAllowedUri(href, {\n              defaultValidate: url => !!isAllowedUri(url, this.options.protocols),\n              protocols: this.options.protocols,\n              defaultProtocol: this.options.defaultProtocol,\n            })\n          ) {\n            return false\n          }\n          return null\n        },\n      },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    // prevent XSS attacks\n    if (\n      !this.options.isAllowedUri(HTMLAttributes.href, {\n        defaultValidate: href => !!isAllowedUri(href, this.options.protocols),\n        protocols: this.options.protocols,\n        defaultProtocol: this.options.defaultProtocol,\n      })\n    ) {\n      // strip out the href\n      return ['a', mergeAttributes(this.options.HTMLAttributes, { ...HTMLAttributes, href: '' }), 0]\n    }\n\n    return ['a', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addCommands() {\n    return {\n      setLink:\n        attributes =>\n        ({ chain }) => {\n          const { href } = attributes\n\n          if (\n            !this.options.isAllowedUri(href, {\n              defaultValidate: url => !!isAllowedUri(url, this.options.protocols),\n              protocols: this.options.protocols,\n              defaultProtocol: this.options.defaultProtocol,\n            })\n          ) {\n            return false\n          }\n\n          return chain().setMark(this.name, attributes).setMeta('preventAutolink', true).run()\n        },\n\n      toggleLink:\n        attributes =>\n        ({ chain }) => {\n          const { href } = attributes || {}\n\n          if (\n            href &&\n            !this.options.isAllowedUri(href, {\n              defaultValidate: url => !!isAllowedUri(url, this.options.protocols),\n              protocols: this.options.protocols,\n              defaultProtocol: this.options.defaultProtocol,\n            })\n          ) {\n            return false\n          }\n\n          return chain()\n            .toggleMark(this.name, attributes, { extendEmptyMarkRange: true })\n            .setMeta('preventAutolink', true)\n            .run()\n        },\n\n      unsetLink:\n        () =>\n        ({ chain }) => {\n          return chain().unsetMark(this.name, { extendEmptyMarkRange: true }).setMeta('preventAutolink', true).run()\n        },\n    }\n  },\n\n  addPasteRules() {\n    return [\n      markPasteRule({\n        find: text => {\n          const foundLinks: PasteRuleMatch[] = []\n\n          if (text) {\n            const { protocols, defaultProtocol } = this.options\n            const links = find(text).filter(\n              item =>\n                item.isLink &&\n                this.options.isAllowedUri(item.value, {\n                  defaultValidate: href => !!isAllowedUri(href, protocols),\n                  protocols,\n                  defaultProtocol,\n                }),\n            )\n\n            if (links.length) {\n              links.forEach(link =>\n                foundLinks.push({\n                  text: link.value,\n                  data: {\n                    href: link.href,\n                  },\n                  index: link.start,\n                }),\n              )\n            }\n          }\n\n          return foundLinks\n        },\n        type: this.type,\n        getAttributes: match => {\n          return {\n            href: match.data?.href,\n          }\n        },\n      }),\n    ]\n  },\n\n  addProseMirrorPlugins() {\n    const plugins: Plugin[] = []\n    const { protocols, defaultProtocol } = this.options\n\n    if (this.options.autolink) {\n      plugins.push(\n        autolink({\n          type: this.type,\n          defaultProtocol: this.options.defaultProtocol,\n          validate: url =>\n            this.options.isAllowedUri(url, {\n              defaultValidate: href => !!isAllowedUri(href, protocols),\n              protocols,\n              defaultProtocol,\n            }),\n          shouldAutoLink: this.options.shouldAutoLink,\n        }),\n      )\n    }\n\n    if (this.options.openOnClick === true) {\n      plugins.push(\n        clickHandler({\n          type: this.type,\n          editor: this.editor,\n          enableClickSelection: this.options.enableClickSelection,\n        }),\n      )\n    }\n\n    if (this.options.linkOnPaste) {\n      plugins.push(\n        pasteHandler({\n          editor: this.editor,\n          defaultProtocol: this.options.defaultProtocol,\n          type: this.type,\n        }),\n      )\n    }\n\n    return plugins\n  },\n})\n","import type { NodeWithPos } from '@tiptap/core'\nimport { combineTransactionSteps, findChildrenInRange, getChangedRanges, getMarksBetween } from '@tiptap/core'\nimport type { MarkType } from '@tiptap/pm/model'\nimport { Plugin, PluginKey } from '@tiptap/pm/state'\nimport type { MultiToken } from 'linkifyjs'\nimport { tokenize } from 'linkifyjs'\n\nimport { UNICODE_WHITESPACE_REGEX, UNICODE_WHITESPACE_REGEX_END } from './whitespace.js'\n\n/**\n * Check if the provided tokens form a valid link structure, which can either be a single link token\n * or a link token surrounded by parentheses or square brackets.\n *\n * This ensures that only complete and valid text is hyperlinked, preventing cases where a valid\n * top-level domain (TLD) is immediately followed by an invalid character, like a number. For\n * example, with the `find` method from Linkify, entering `example.com1` would result in\n * `example.com` being linked and the trailing `1` left as plain text. By using the `tokenize`\n * method, we can perform more comprehensive validation on the input text.\n */\nfunction isValidLinkStructure(tokens: Array<ReturnType<MultiToken['toObject']>>) {\n  if (tokens.length === 1) {\n    return tokens[0].isLink\n  }\n\n  if (tokens.length === 3 && tokens[1].isLink) {\n    return ['()', '[]'].includes(tokens[0].value + tokens[2].value)\n  }\n\n  return false\n}\n\ntype AutolinkOptions = {\n  type: MarkType\n  defaultProtocol: string\n  validate: (url: string) => boolean\n  shouldAutoLink: (url: string) => boolean\n}\n\n/**\n * This plugin allows you to automatically add links to your editor.\n * @param options The plugin options\n * @returns The plugin instance\n */\nexport function autolink(options: AutolinkOptions): Plugin {\n  return new Plugin({\n    key: new PluginKey('autolink'),\n    appendTransaction: (transactions, oldState, newState) => {\n      /**\n       * Does the transaction change the document?\n       */\n      const docChanges = transactions.some(transaction => transaction.docChanged) && !oldState.doc.eq(newState.doc)\n\n      /**\n       * Prevent autolink if the transaction is not a document change or if the transaction has the meta `preventAutolink`.\n       */\n      const preventAutolink = transactions.some(transaction => transaction.getMeta('preventAutolink'))\n\n      /**\n       * Prevent autolink if the transaction is not a document change\n       * or if the transaction has the meta `preventAutolink`.\n       */\n      if (!docChanges || preventAutolink) {\n        return\n      }\n\n      const { tr } = newState\n      const transform = combineTransactionSteps(oldState.doc, [...transactions])\n      const changes = getChangedRanges(transform)\n\n      changes.forEach(({ newRange }) => {\n        // Now let’s see if we can add new links.\n        const nodesInChangedRanges = findChildrenInRange(newState.doc, newRange, node => node.isTextblock)\n\n        let textBlock: NodeWithPos | undefined\n        let textBeforeWhitespace: string | undefined\n\n        if (nodesInChangedRanges.length > 1) {\n          // Grab the first node within the changed ranges (ex. the first of two paragraphs when hitting enter).\n          textBlock = nodesInChangedRanges[0]\n          textBeforeWhitespace = newState.doc.textBetween(\n            textBlock.pos,\n            textBlock.pos + textBlock.node.nodeSize,\n            undefined,\n            ' ',\n          )\n        } else if (nodesInChangedRanges.length) {\n          const endText = newState.doc.textBetween(newRange.from, newRange.to, ' ', ' ')\n          if (!UNICODE_WHITESPACE_REGEX_END.test(endText)) {\n            return\n          }\n          textBlock = nodesInChangedRanges[0]\n          textBeforeWhitespace = newState.doc.textBetween(textBlock.pos, newRange.to, undefined, ' ')\n        }\n\n        if (textBlock && textBeforeWhitespace) {\n          const wordsBeforeWhitespace = textBeforeWhitespace.split(UNICODE_WHITESPACE_REGEX).filter(Boolean)\n\n          if (wordsBeforeWhitespace.length <= 0) {\n            return false\n          }\n\n          const lastWordBeforeSpace = wordsBeforeWhitespace[wordsBeforeWhitespace.length - 1]\n          const lastWordAndBlockOffset = textBlock.pos + textBeforeWhitespace.lastIndexOf(lastWordBeforeSpace)\n\n          if (!lastWordBeforeSpace) {\n            return false\n          }\n\n          const linksBeforeSpace = tokenize(lastWordBeforeSpace).map(t => t.toObject(options.defaultProtocol))\n\n          if (!isValidLinkStructure(linksBeforeSpace)) {\n            return false\n          }\n\n          linksBeforeSpace\n            .filter(link => link.isLink)\n            // Calculate link position.\n            .map(link => ({\n              ...link,\n              from: lastWordAndBlockOffset + link.start + 1,\n              to: lastWordAndBlockOffset + link.end + 1,\n            }))\n            // ignore link inside code mark\n            .filter(link => {\n              if (!newState.schema.marks.code) {\n                return true\n              }\n\n              return !newState.doc.rangeHasMark(link.from, link.to, newState.schema.marks.code)\n            })\n            // validate link\n            .filter(link => options.validate(link.value))\n            // check whether should autolink\n            .filter(link => options.shouldAutoLink(link.value))\n            // Add link mark.\n            .forEach(link => {\n              if (getMarksBetween(link.from, link.to, newState.doc).some(item => item.mark.type === options.type)) {\n                return\n              }\n\n              tr.addMark(\n                link.from,\n                link.to,\n                options.type.create({\n                  href: link.href,\n                }),\n              )\n            })\n        }\n      })\n\n      if (!tr.steps.length) {\n        return\n      }\n\n      return tr\n    },\n  })\n}\n","// From DOMPurify\n// https://github.com/cure53/DOMPurify/blob/main/src/regexp.ts\nexport const UNICODE_WHITESPACE_PATTERN = '[\\u0000-\\u0020\\u00A0\\u1680\\u180E\\u2000-\\u2029\\u205F\\u3000]'\n\nexport const UNICODE_WHITESPACE_REGEX = new RegExp(UNICODE_WHITESPACE_PATTERN)\nexport const UNICODE_WHITESPACE_REGEX_END = new RegExp(`${UNICODE_WHITESPACE_PATTERN}$`)\nexport const UNICODE_WHITESPACE_REGEX_GLOBAL = new RegExp(UNICODE_WHITESPACE_PATTERN, 'g')\n","import type { Editor } from '@tiptap/core'\nimport { getAttributes } from '@tiptap/core'\nimport type { MarkType } from '@tiptap/pm/model'\nimport { Plugin, PluginKey } from '@tiptap/pm/state'\n\ntype ClickHandlerOptions = {\n  type: MarkType\n  editor: Editor\n  enableClickSelection?: boolean\n}\n\nexport function clickHandler(options: ClickHandlerOptions): Plugin {\n  return new Plugin({\n    key: new PluginKey('handleClickLink'),\n    props: {\n      handleClick: (view, pos, event) => {\n        if (event.button !== 0) {\n          return false\n        }\n\n        if (!view.editable) {\n          return false\n        }\n\n        let link: HTMLAnchorElement | null = null\n\n        if (event.target instanceof HTMLAnchorElement) {\n          link = event.target\n        } else {\n          let a = event.target as HTMLElement\n          const els = []\n\n          while (a.nodeName !== 'DIV') {\n            els.push(a)\n            a = a.parentNode as HTMLElement\n          }\n          link = els.find(value => value.nodeName === 'A') as HTMLAnchorElement\n        }\n\n        if (!link) {\n          return false\n        }\n\n        const attrs = getAttributes(view.state, options.type.name)\n        const href = link?.href ?? attrs.href\n        const target = link?.target ?? attrs.target\n\n        if (options.enableClickSelection) {\n          options.editor.commands.extendMarkRange(options.type.name)\n        }\n\n        if (link && href) {\n          window.open(href, target)\n\n          return true\n        }\n\n        return false\n      },\n    },\n  })\n}\n","import type { Editor } from '@tiptap/core'\nimport type { MarkType } from '@tiptap/pm/model'\nimport { Plugin, PluginKey } from '@tiptap/pm/state'\nimport { find } from 'linkifyjs'\n\ntype PasteHandlerOptions = {\n  editor: Editor\n  defaultProtocol: string\n  type: MarkType\n}\n\nexport function pasteHandler(options: PasteHandlerOptions): Plugin {\n  return new Plugin({\n    key: new PluginKey('handlePasteLink'),\n    props: {\n      handlePaste: (view, event, slice) => {\n        const { state } = view\n        const { selection } = state\n        const { empty } = selection\n\n        if (empty) {\n          return false\n        }\n\n        let textContent = ''\n\n        slice.content.forEach(node => {\n          textContent += node.textContent\n        })\n\n        const link = find(textContent, { defaultProtocol: options.defaultProtocol }).find(\n          item => item.isLink && item.value === textContent,\n        )\n\n        if (!textContent || !link) {\n          return false\n        }\n\n        return options.editor.commands.setMark(options.type, {\n          href: link.href,\n        })\n      },\n    },\n  })\n}\n","import { Link } from './link.js'\n\nexport * from './link.js'\n\nexport default Link\n"],"names":["find","Plugin","PluginKey","Plugin","PluginKey","find"],"mappings":"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","debugId":null}},
    {"offset": {"line": 2506, "column": 0}, "map": {"version":3,"sources":["file:///D:/masterji/node_modules/%40tiptap/extension-list/src/bullet-list/bullet-list.ts","file:///D:/masterji/node_modules/%40tiptap/extension-list/src/item/list-item.ts","file:///D:/masterji/node_modules/%40tiptap/extension-list/src/keymap/list-keymap.ts","file:///D:/masterji/node_modules/%40tiptap/extension-list/src/keymap/listHelpers/index.ts","file:///D:/masterji/node_modules/%40tiptap/extension-list/src/keymap/listHelpers/findListItemPos.ts","file:///D:/masterji/node_modules/%40tiptap/extension-list/src/keymap/listHelpers/getNextListDepth.ts","file:///D:/masterji/node_modules/%40tiptap/extension-list/src/keymap/listHelpers/handleBackspace.ts","file:///D:/masterji/node_modules/%40tiptap/extension-list/src/keymap/listHelpers/hasListBefore.ts","file:///D:/masterji/node_modules/%40tiptap/extension-list/src/keymap/listHelpers/hasListItemBefore.ts","file:///D:/masterji/node_modules/%40tiptap/extension-list/src/keymap/listHelpers/listItemHasSubList.ts","file:///D:/masterji/node_modules/%40tiptap/extension-list/src/keymap/listHelpers/handleDelete.ts","file:///D:/masterji/node_modules/%40tiptap/extension-list/src/keymap/listHelpers/nextListIsDeeper.ts","file:///D:/masterji/node_modules/%40tiptap/extension-list/src/keymap/listHelpers/nextListIsHigher.ts","file:///D:/masterji/node_modules/%40tiptap/extension-list/src/keymap/listHelpers/hasListItemAfter.ts","file:///D:/masterji/node_modules/%40tiptap/extension-list/src/kit/index.ts","file:///D:/masterji/node_modules/%40tiptap/extension-list/src/ordered-list/ordered-list.ts","file:///D:/masterji/node_modules/%40tiptap/extension-list/src/task-item/task-item.ts","file:///D:/masterji/node_modules/%40tiptap/extension-list/src/task-list/task-list.ts"],"sourcesContent":["import { mergeAttributes, Node, wrappingInputRule } from '@tiptap/core'\n\nconst ListItemName = 'listItem'\nconst TextStyleName = 'textStyle'\n\nexport interface BulletListOptions {\n  /**\n   * The node name for the list items\n   * @default 'listItem'\n   * @example 'paragraph'\n   */\n  itemTypeName: string\n\n  /**\n   * HTML attributes to add to the bullet list element\n   * @default {}\n   * @example { class: 'foo' }\n   */\n  HTMLAttributes: Record<string, any>\n\n  /**\n   * Keep the marks when splitting the list\n   * @default false\n   * @example true\n   */\n  keepMarks: boolean\n\n  /**\n   * Keep the attributes when splitting the list\n   * @default false\n   * @example true\n   */\n  keepAttributes: boolean\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    bulletList: {\n      /**\n       * Toggle a bullet list\n       */\n      toggleBulletList: () => ReturnType\n    }\n  }\n}\n\n/**\n * Matches a bullet list to a dash or asterisk.\n */\nexport const bulletListInputRegex = /^\\s*([-+*])\\s$/\n\n/**\n * This extension allows you to create bullet lists.\n * This requires the ListItem extension\n * @see https://tiptap.dev/api/nodes/bullet-list\n * @see https://tiptap.dev/api/nodes/list-item.\n */\nexport const BulletList = Node.create<BulletListOptions>({\n  name: 'bulletList',\n\n  addOptions() {\n    return {\n      itemTypeName: 'listItem',\n      HTMLAttributes: {},\n      keepMarks: false,\n      keepAttributes: false,\n    }\n  },\n\n  group: 'block list',\n\n  content() {\n    return `${this.options.itemTypeName}+`\n  },\n\n  parseHTML() {\n    return [{ tag: 'ul' }]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['ul', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addCommands() {\n    return {\n      toggleBulletList:\n        () =>\n        ({ commands, chain }) => {\n          if (this.options.keepAttributes) {\n            return chain()\n              .toggleList(this.name, this.options.itemTypeName, this.options.keepMarks)\n              .updateAttributes(ListItemName, this.editor.getAttributes(TextStyleName))\n              .run()\n          }\n          return commands.toggleList(this.name, this.options.itemTypeName, this.options.keepMarks)\n        },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-Shift-8': () => this.editor.commands.toggleBulletList(),\n    }\n  },\n\n  addInputRules() {\n    let inputRule = wrappingInputRule({\n      find: bulletListInputRegex,\n      type: this.type,\n    })\n\n    if (this.options.keepMarks || this.options.keepAttributes) {\n      inputRule = wrappingInputRule({\n        find: bulletListInputRegex,\n        type: this.type,\n        keepMarks: this.options.keepMarks,\n        keepAttributes: this.options.keepAttributes,\n        getAttributes: () => {\n          return this.editor.getAttributes(TextStyleName)\n        },\n        editor: this.editor,\n      })\n    }\n    return [inputRule]\n  },\n})\n","import { mergeAttributes, Node } from '@tiptap/core'\n\nexport interface ListItemOptions {\n  /**\n   * The HTML attributes for a list item node.\n   * @default {}\n   * @example { class: 'foo' }\n   */\n  HTMLAttributes: Record<string, any>\n\n  /**\n   * The node type for bulletList nodes\n   * @default 'bulletList'\n   * @example 'myCustomBulletList'\n   */\n  bulletListTypeName: string\n\n  /**\n   * The node type for orderedList nodes\n   * @default 'orderedList'\n   * @example 'myCustomOrderedList'\n   */\n  orderedListTypeName: string\n}\n\n/**\n * This extension allows you to create list items.\n * @see https://www.tiptap.dev/api/nodes/list-item\n */\nexport const ListItem = Node.create<ListItemOptions>({\n  name: 'listItem',\n\n  addOptions() {\n    return {\n      HTMLAttributes: {},\n      bulletListTypeName: 'bulletList',\n      orderedListTypeName: 'orderedList',\n    }\n  },\n\n  content: 'paragraph block*',\n\n  defining: true,\n\n  parseHTML() {\n    return [\n      {\n        tag: 'li',\n      },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['li', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      Enter: () => this.editor.commands.splitListItem(this.name),\n      Tab: () => this.editor.commands.sinkListItem(this.name),\n      'Shift-Tab': () => this.editor.commands.liftListItem(this.name),\n    }\n  },\n})\n","import { Extension } from '@tiptap/core'\n\nimport { handleBackspace, handleDelete } from './listHelpers/index.js'\n\nexport type ListKeymapOptions = {\n  /**\n   * An array of list types. This is used for item and wrapper list matching.\n   * @default []\n   * @example [{ itemName: 'listItem', wrapperNames: ['bulletList', 'orderedList'] }]\n   */\n  listTypes: Array<{\n    itemName: string\n    wrapperNames: string[]\n  }>\n}\n\n/**\n * This extension registers custom keymaps to change the behaviour of the backspace and delete keys.\n * By default Prosemirror keyhandling will always lift or sink items so paragraphs are joined into\n * the adjacent or previous list item. This extension will prevent this behaviour and instead will\n * try to join paragraphs from two list items into a single list item.\n * @see https://www.tiptap.dev/api/extensions/list-keymap\n */\nexport const ListKeymap = Extension.create<ListKeymapOptions>({\n  name: 'listKeymap',\n\n  addOptions() {\n    return {\n      listTypes: [\n        {\n          itemName: 'listItem',\n          wrapperNames: ['bulletList', 'orderedList'],\n        },\n        {\n          itemName: 'taskItem',\n          wrapperNames: ['taskList'],\n        },\n      ],\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      Delete: ({ editor }) => {\n        let handled = false\n\n        this.options.listTypes.forEach(({ itemName }) => {\n          if (editor.state.schema.nodes[itemName] === undefined) {\n            return\n          }\n\n          if (handleDelete(editor, itemName)) {\n            handled = true\n          }\n        })\n\n        return handled\n      },\n      'Mod-Delete': ({ editor }) => {\n        let handled = false\n\n        this.options.listTypes.forEach(({ itemName }) => {\n          if (editor.state.schema.nodes[itemName] === undefined) {\n            return\n          }\n\n          if (handleDelete(editor, itemName)) {\n            handled = true\n          }\n        })\n\n        return handled\n      },\n      Backspace: ({ editor }) => {\n        let handled = false\n\n        this.options.listTypes.forEach(({ itemName, wrapperNames }) => {\n          if (editor.state.schema.nodes[itemName] === undefined) {\n            return\n          }\n\n          if (handleBackspace(editor, itemName, wrapperNames)) {\n            handled = true\n          }\n        })\n\n        return handled\n      },\n      'Mod-Backspace': ({ editor }) => {\n        let handled = false\n\n        this.options.listTypes.forEach(({ itemName, wrapperNames }) => {\n          if (editor.state.schema.nodes[itemName] === undefined) {\n            return\n          }\n\n          if (handleBackspace(editor, itemName, wrapperNames)) {\n            handled = true\n          }\n        })\n\n        return handled\n      },\n    }\n  },\n})\n","export * from './findListItemPos.js'\nexport * from './getNextListDepth.js'\nexport * from './handleBackspace.js'\nexport * from './handleDelete.js'\nexport * from './hasListBefore.js'\nexport * from './hasListItemAfter.js'\nexport * from './hasListItemBefore.js'\nexport * from './listItemHasSubList.js'\nexport * from './nextListIsDeeper.js'\nexport * from './nextListIsHigher.js'\n","import { getNodeType } from '@tiptap/core'\nimport type { NodeType } from '@tiptap/pm/model'\nimport type { EditorState } from '@tiptap/pm/state'\n\nexport const findListItemPos = (typeOrName: string | NodeType, state: EditorState) => {\n  const { $from } = state.selection\n  const nodeType = getNodeType(typeOrName, state.schema)\n\n  let currentNode = null\n  let currentDepth = $from.depth\n  let currentPos = $from.pos\n  let targetDepth: number | null = null\n\n  while (currentDepth > 0 && targetDepth === null) {\n    currentNode = $from.node(currentDepth)\n\n    if (currentNode.type === nodeType) {\n      targetDepth = currentDepth\n    } else {\n      currentDepth -= 1\n      currentPos -= 1\n    }\n  }\n\n  if (targetDepth === null) {\n    return null\n  }\n\n  return { $pos: state.doc.resolve(currentPos), depth: targetDepth }\n}\n","import { getNodeAtPosition } from '@tiptap/core'\nimport type { EditorState } from '@tiptap/pm/state'\n\nimport { findListItemPos } from './findListItemPos.js'\n\nexport const getNextListDepth = (typeOrName: string, state: EditorState) => {\n  const listItemPos = findListItemPos(typeOrName, state)\n\n  if (!listItemPos) {\n    return false\n  }\n\n  const [, depth] = getNodeAtPosition(state, typeOrName, listItemPos.$pos.pos + 4)\n\n  return depth\n}\n","import type { Editor } from '@tiptap/core'\nimport { isAtStartOfNode, isNodeActive } from '@tiptap/core'\nimport type { Node } from '@tiptap/pm/model'\n\nimport { findListItemPos } from './findListItemPos.js'\nimport { hasListBefore } from './hasListBefore.js'\nimport { hasListItemBefore } from './hasListItemBefore.js'\nimport { listItemHasSubList } from './listItemHasSubList.js'\n\nexport const handleBackspace = (editor: Editor, name: string, parentListTypes: string[]) => {\n  // this is required to still handle the undo handling\n  if (editor.commands.undoInputRule()) {\n    return true\n  }\n\n  // if the selection is not collapsed\n  // we can rely on the default backspace behavior\n  if (editor.state.selection.from !== editor.state.selection.to) {\n    return false\n  }\n\n  // if the current item is NOT inside a list item &\n  // the previous item is a list (orderedList or bulletList)\n  // move the cursor into the list and delete the current item\n  if (!isNodeActive(editor.state, name) && hasListBefore(editor.state, name, parentListTypes)) {\n    const { $anchor } = editor.state.selection\n\n    const $listPos = editor.state.doc.resolve($anchor.before() - 1)\n\n    const listDescendants: Array<{ node: Node; pos: number }> = []\n\n    $listPos.node().descendants((node, pos) => {\n      if (node.type.name === name) {\n        listDescendants.push({ node, pos })\n      }\n    })\n\n    const lastItem = listDescendants.at(-1)\n\n    if (!lastItem) {\n      return false\n    }\n\n    const $lastItemPos = editor.state.doc.resolve($listPos.start() + lastItem.pos + 1)\n\n    return editor\n      .chain()\n      .cut({ from: $anchor.start() - 1, to: $anchor.end() + 1 }, $lastItemPos.end())\n      .joinForward()\n      .run()\n  }\n\n  // if the cursor is not inside the current node type\n  // do nothing and proceed\n  if (!isNodeActive(editor.state, name)) {\n    return false\n  }\n\n  // if the cursor is not at the start of a node\n  // do nothing and proceed\n  if (!isAtStartOfNode(editor.state)) {\n    return false\n  }\n\n  const listItemPos = findListItemPos(name, editor.state)\n\n  if (!listItemPos) {\n    return false\n  }\n\n  const $prev = editor.state.doc.resolve(listItemPos.$pos.pos - 2)\n  const prevNode = $prev.node(listItemPos.depth)\n\n  const previousListItemHasSubList = listItemHasSubList(name, editor.state, prevNode)\n\n  // if the previous item is a list item and doesn't have a sublist, join the list items\n  if (hasListItemBefore(name, editor.state) && !previousListItemHasSubList) {\n    return editor.commands.joinItemBackward()\n  }\n\n  // otherwise in the end, a backspace should\n  // always just lift the list item if\n  // joining / merging is not possible\n  return editor.chain().liftListItem(name).run()\n}\n","import type { EditorState } from '@tiptap/pm/state'\n\nexport const hasListBefore = (editorState: EditorState, name: string, parentListTypes: string[]) => {\n  const { $anchor } = editorState.selection\n\n  const previousNodePos = Math.max(0, $anchor.pos - 2)\n\n  const previousNode = editorState.doc.resolve(previousNodePos).node()\n\n  if (!previousNode || !parentListTypes.includes(previousNode.type.name)) {\n    return false\n  }\n\n  return true\n}\n","import type { EditorState } from '@tiptap/pm/state'\n\nexport const hasListItemBefore = (typeOrName: string, state: EditorState): boolean => {\n  const { $anchor } = state.selection\n\n  const $targetPos = state.doc.resolve($anchor.pos - 2)\n\n  if ($targetPos.index() === 0) {\n    return false\n  }\n\n  if ($targetPos.nodeBefore?.type.name !== typeOrName) {\n    return false\n  }\n\n  return true\n}\n","import { getNodeType } from '@tiptap/core'\nimport type { Node } from '@tiptap/pm/model'\nimport type { EditorState } from '@tiptap/pm/state'\n\nexport const listItemHasSubList = (typeOrName: string, state: EditorState, node?: Node) => {\n  if (!node) {\n    return false\n  }\n\n  const nodeType = getNodeType(typeOrName, state.schema)\n\n  let hasSubList = false\n\n  node.descendants(child => {\n    if (child.type === nodeType) {\n      hasSubList = true\n    }\n  })\n\n  return hasSubList\n}\n","import type { Editor } from '@tiptap/core'\nimport { isAtEndOfNode, isNodeActive } from '@tiptap/core'\n\nimport { nextListIsDeeper } from './nextListIsDeeper.js'\nimport { nextListIsHigher } from './nextListIsHigher.js'\n\nexport const handleDelete = (editor: Editor, name: string) => {\n  // if the cursor is not inside the current node type\n  // do nothing and proceed\n  if (!isNodeActive(editor.state, name)) {\n    return false\n  }\n\n  // if the cursor is not at the end of a node\n  // do nothing and proceed\n  if (!isAtEndOfNode(editor.state, name)) {\n    return false\n  }\n\n  // if the selection is not collapsed, or not within a single node\n  // do nothing and proceed\n  const { selection } = editor.state\n  const { $from, $to } = selection\n\n  if (!selection.empty && $from.sameParent($to)) {\n    return false\n  }\n\n  // check if the next node is a list with a deeper depth\n  if (nextListIsDeeper(name, editor.state)) {\n    return editor\n      .chain()\n      .focus(editor.state.selection.from + 4)\n      .lift(name)\n      .joinBackward()\n      .run()\n  }\n\n  if (nextListIsHigher(name, editor.state)) {\n    return editor.chain().joinForward().joinBackward().run()\n  }\n\n  return editor.commands.joinItemForward()\n}\n","import type { EditorState } from '@tiptap/pm/state'\n\nimport { findListItemPos } from './findListItemPos.js'\nimport { getNextListDepth } from './getNextListDepth.js'\n\nexport const nextListIsDeeper = (typeOrName: string, state: EditorState) => {\n  const listDepth = getNextListDepth(typeOrName, state)\n  const listItemPos = findListItemPos(typeOrName, state)\n\n  if (!listItemPos || !listDepth) {\n    return false\n  }\n\n  if (listDepth > listItemPos.depth) {\n    return true\n  }\n\n  return false\n}\n","import type { EditorState } from '@tiptap/pm/state'\n\nimport { findListItemPos } from './findListItemPos.js'\nimport { getNextListDepth } from './getNextListDepth.js'\n\nexport const nextListIsHigher = (typeOrName: string, state: EditorState) => {\n  const listDepth = getNextListDepth(typeOrName, state)\n  const listItemPos = findListItemPos(typeOrName, state)\n\n  if (!listItemPos || !listDepth) {\n    return false\n  }\n\n  if (listDepth < listItemPos.depth) {\n    return true\n  }\n\n  return false\n}\n","import type { EditorState } from '@tiptap/pm/state'\n\nexport const hasListItemAfter = (typeOrName: string, state: EditorState): boolean => {\n  const { $anchor } = state.selection\n\n  const $targetPos = state.doc.resolve($anchor.pos - $anchor.parentOffset - 2)\n\n  if ($targetPos.index() === $targetPos.parent.childCount - 1) {\n    return false\n  }\n\n  if ($targetPos.nodeAfter?.type.name !== typeOrName) {\n    return false\n  }\n\n  return true\n}\n","import { Extension } from '@tiptap/core'\n\nimport type { BulletListOptions } from '../bullet-list/index.js'\nimport { BulletList } from '../bullet-list/index.js'\nimport type { ListItemOptions } from '../item/index.js'\nimport { ListItem } from '../item/index.js'\nimport type { ListKeymapOptions } from '../keymap/index.js'\nimport { ListKeymap } from '../keymap/index.js'\nimport type { OrderedListOptions } from '../ordered-list/index.js'\nimport { OrderedList } from '../ordered-list/index.js'\nimport type { TaskItemOptions } from '../task-item/index.js'\nimport { TaskItem } from '../task-item/index.js'\nimport type { TaskListOptions } from '../task-list/index.js'\nimport { TaskList } from '../task-list/index.js'\n\nexport interface ListKitOptions {\n  /**\n   * If set to false, the bulletList extension will not be registered\n   * @example table: false\n   */\n  bulletList: Partial<BulletListOptions> | false\n  /**\n   * If set to false, the listItem extension will not be registered\n   */\n  listItem: Partial<ListItemOptions> | false\n  /**\n   * If set to false, the listKeymap extension will not be registered\n   */\n  listKeymap: Partial<ListKeymapOptions> | false\n  /**\n   * If set to false, the orderedList extension will not be registered\n   */\n  orderedList: Partial<OrderedListOptions> | false\n  /**\n   * If set to false, the taskItem extension will not be registered\n   */\n  taskItem: Partial<TaskItemOptions> | false\n  /**\n   * If set to false, the taskList extension will not be registered\n   */\n  taskList: Partial<TaskListOptions> | false\n}\n\n/**\n * The table kit is a collection of table editor extensions.\n *\n * It’s a good starting point for building your own table in Tiptap.\n */\nexport const ListKit = Extension.create<ListKitOptions>({\n  name: 'listKit',\n\n  addExtensions() {\n    const extensions = []\n\n    if (this.options.bulletList !== false) {\n      extensions.push(BulletList.configure(this.options.bulletList))\n    }\n\n    if (this.options.listItem !== false) {\n      extensions.push(ListItem.configure(this.options.listItem))\n    }\n\n    if (this.options.listKeymap !== false) {\n      extensions.push(ListKeymap.configure(this.options.listKeymap))\n    }\n\n    if (this.options.orderedList !== false) {\n      extensions.push(OrderedList.configure(this.options.orderedList))\n    }\n\n    if (this.options.taskItem !== false) {\n      extensions.push(TaskItem.configure(this.options.taskItem))\n    }\n\n    if (this.options.taskList !== false) {\n      extensions.push(TaskList.configure(this.options.taskList))\n    }\n\n    return extensions\n  },\n})\n","import { mergeAttributes, Node, wrappingInputRule } from '@tiptap/core'\n\nconst ListItemName = 'listItem'\nconst TextStyleName = 'textStyle'\n\nexport interface OrderedListOptions {\n  /**\n   * The node type name for list items.\n   * @default 'listItem'\n   * @example 'myListItem'\n   */\n  itemTypeName: string\n\n  /**\n   * The HTML attributes for an ordered list node.\n   * @default {}\n   * @example { class: 'foo' }\n   */\n  HTMLAttributes: Record<string, any>\n\n  /**\n   * Keep the marks when splitting a list item.\n   * @default false\n   * @example true\n   */\n  keepMarks: boolean\n\n  /**\n   * Keep the attributes when splitting a list item.\n   * @default false\n   * @example true\n   */\n  keepAttributes: boolean\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    orderedList: {\n      /**\n       * Toggle an ordered list\n       * @example editor.commands.toggleOrderedList()\n       */\n      toggleOrderedList: () => ReturnType\n    }\n  }\n}\n\n/**\n * Matches an ordered list to a 1. on input (or any number followed by a dot).\n */\nexport const orderedListInputRegex = /^(\\d+)\\.\\s$/\n\n/**\n * This extension allows you to create ordered lists.\n * This requires the ListItem extension\n * @see https://www.tiptap.dev/api/nodes/ordered-list\n * @see https://www.tiptap.dev/api/nodes/list-item\n */\nexport const OrderedList = Node.create<OrderedListOptions>({\n  name: 'orderedList',\n\n  addOptions() {\n    return {\n      itemTypeName: 'listItem',\n      HTMLAttributes: {},\n      keepMarks: false,\n      keepAttributes: false,\n    }\n  },\n\n  group: 'block list',\n\n  content() {\n    return `${this.options.itemTypeName}+`\n  },\n\n  addAttributes() {\n    return {\n      start: {\n        default: 1,\n        parseHTML: element => {\n          return element.hasAttribute('start') ? parseInt(element.getAttribute('start') || '', 10) : 1\n        },\n      },\n      type: {\n        default: null,\n        parseHTML: element => element.getAttribute('type'),\n      },\n    }\n  },\n\n  parseHTML() {\n    return [\n      {\n        tag: 'ol',\n      },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    const { start, ...attributesWithoutStart } = HTMLAttributes\n\n    return start === 1\n      ? ['ol', mergeAttributes(this.options.HTMLAttributes, attributesWithoutStart), 0]\n      : ['ol', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addCommands() {\n    return {\n      toggleOrderedList:\n        () =>\n        ({ commands, chain }) => {\n          if (this.options.keepAttributes) {\n            return chain()\n              .toggleList(this.name, this.options.itemTypeName, this.options.keepMarks)\n              .updateAttributes(ListItemName, this.editor.getAttributes(TextStyleName))\n              .run()\n          }\n          return commands.toggleList(this.name, this.options.itemTypeName, this.options.keepMarks)\n        },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-Shift-7': () => this.editor.commands.toggleOrderedList(),\n    }\n  },\n\n  addInputRules() {\n    let inputRule = wrappingInputRule({\n      find: orderedListInputRegex,\n      type: this.type,\n      getAttributes: match => ({ start: +match[1] }),\n      joinPredicate: (match, node) => node.childCount + node.attrs.start === +match[1],\n    })\n\n    if (this.options.keepMarks || this.options.keepAttributes) {\n      inputRule = wrappingInputRule({\n        find: orderedListInputRegex,\n        type: this.type,\n        keepMarks: this.options.keepMarks,\n        keepAttributes: this.options.keepAttributes,\n        getAttributes: match => ({ start: +match[1], ...this.editor.getAttributes(TextStyleName) }),\n        joinPredicate: (match, node) => node.childCount + node.attrs.start === +match[1],\n        editor: this.editor,\n      })\n    }\n    return [inputRule]\n  },\n})\n","import type { KeyboardShortcutCommand } from '@tiptap/core'\nimport { mergeAttributes, Node, wrappingInputRule } from '@tiptap/core'\nimport type { Node as ProseMirrorNode } from '@tiptap/pm/model'\n\nexport interface TaskItemOptions {\n  /**\n   * A callback function that is called when the checkbox is clicked while the editor is in readonly mode.\n   * @param node The prosemirror node of the task item\n   * @param checked The new checked state\n   * @returns boolean\n   */\n  onReadOnlyChecked?: (node: ProseMirrorNode, checked: boolean) => boolean\n\n  /**\n   * Controls whether the task items can be nested or not.\n   * @default false\n   * @example true\n   */\n  nested: boolean\n\n  /**\n   * HTML attributes to add to the task item element.\n   * @default {}\n   * @example { class: 'foo' }\n   */\n  HTMLAttributes: Record<string, any>\n\n  /**\n   * The node type for taskList nodes\n   * @default 'taskList'\n   * @example 'myCustomTaskList'\n   */\n  taskListTypeName: string\n\n  /**\n   * Accessibility options for the task item.\n   * @default {}\n   * @example\n   * ```js\n   * {\n   *   checkboxLabel: (node) => `Task item: ${node.textContent || 'empty task item'}`\n   * }\n   */\n  a11y?: {\n    checkboxLabel?: (node: ProseMirrorNode, checked: boolean) => string\n  }\n}\n\n/**\n * Matches a task item to a - [ ] on input.\n */\nexport const inputRegex = /^\\s*(\\[([( |x])?\\])\\s$/\n\n/**\n * This extension allows you to create task items.\n * @see https://www.tiptap.dev/api/nodes/task-item\n */\nexport const TaskItem = Node.create<TaskItemOptions>({\n  name: 'taskItem',\n\n  addOptions() {\n    return {\n      nested: false,\n      HTMLAttributes: {},\n      taskListTypeName: 'taskList',\n      a11y: undefined,\n    }\n  },\n\n  content() {\n    return this.options.nested ? 'paragraph block*' : 'paragraph+'\n  },\n\n  defining: true,\n\n  addAttributes() {\n    return {\n      checked: {\n        default: false,\n        keepOnSplit: false,\n        parseHTML: element => {\n          const dataChecked = element.getAttribute('data-checked')\n\n          return dataChecked === '' || dataChecked === 'true'\n        },\n        renderHTML: attributes => ({\n          'data-checked': attributes.checked,\n        }),\n      },\n    }\n  },\n\n  parseHTML() {\n    return [\n      {\n        tag: `li[data-type=\"${this.name}\"]`,\n        priority: 51,\n      },\n    ]\n  },\n\n  renderHTML({ node, HTMLAttributes }) {\n    return [\n      'li',\n      mergeAttributes(this.options.HTMLAttributes, HTMLAttributes, {\n        'data-type': this.name,\n      }),\n      [\n        'label',\n        [\n          'input',\n          {\n            type: 'checkbox',\n            checked: node.attrs.checked ? 'checked' : null,\n          },\n        ],\n        ['span'],\n      ],\n      ['div', 0],\n    ]\n  },\n\n  addKeyboardShortcuts() {\n    const shortcuts: {\n      [key: string]: KeyboardShortcutCommand\n    } = {\n      Enter: () => this.editor.commands.splitListItem(this.name),\n      'Shift-Tab': () => this.editor.commands.liftListItem(this.name),\n    }\n\n    if (!this.options.nested) {\n      return shortcuts\n    }\n\n    return {\n      ...shortcuts,\n      Tab: () => this.editor.commands.sinkListItem(this.name),\n    }\n  },\n\n  addNodeView() {\n    return ({ node, HTMLAttributes, getPos, editor }) => {\n      const listItem = document.createElement('li')\n      const checkboxWrapper = document.createElement('label')\n      const checkboxStyler = document.createElement('span')\n      const checkbox = document.createElement('input')\n      const content = document.createElement('div')\n\n      const updateA11Y = (currentNode: ProseMirrorNode) => {\n        checkbox.ariaLabel =\n          this.options.a11y?.checkboxLabel?.(currentNode, checkbox.checked) ||\n          `Task item checkbox for ${currentNode.textContent || 'empty task item'}`\n      }\n\n      updateA11Y(node)\n\n      checkboxWrapper.contentEditable = 'false'\n      checkbox.type = 'checkbox'\n      checkbox.addEventListener('mousedown', event => event.preventDefault())\n      checkbox.addEventListener('change', event => {\n        // if the editor isn’t editable and we don't have a handler for\n        // readonly checks we have to undo the latest change\n        if (!editor.isEditable && !this.options.onReadOnlyChecked) {\n          checkbox.checked = !checkbox.checked\n\n          return\n        }\n\n        const { checked } = event.target as any\n\n        if (editor.isEditable && typeof getPos === 'function') {\n          editor\n            .chain()\n            .focus(undefined, { scrollIntoView: false })\n            .command(({ tr }) => {\n              const position = getPos()\n\n              if (typeof position !== 'number') {\n                return false\n              }\n              const currentNode = tr.doc.nodeAt(position)\n\n              tr.setNodeMarkup(position, undefined, {\n                ...currentNode?.attrs,\n                checked,\n              })\n\n              return true\n            })\n            .run()\n        }\n        if (!editor.isEditable && this.options.onReadOnlyChecked) {\n          // Reset state if onReadOnlyChecked returns false\n          if (!this.options.onReadOnlyChecked(node, checked)) {\n            checkbox.checked = !checkbox.checked\n          }\n        }\n      })\n\n      Object.entries(this.options.HTMLAttributes).forEach(([key, value]) => {\n        listItem.setAttribute(key, value)\n      })\n\n      listItem.dataset.checked = node.attrs.checked\n      checkbox.checked = node.attrs.checked\n\n      checkboxWrapper.append(checkbox, checkboxStyler)\n      listItem.append(checkboxWrapper, content)\n\n      Object.entries(HTMLAttributes).forEach(([key, value]) => {\n        listItem.setAttribute(key, value)\n      })\n\n      return {\n        dom: listItem,\n        contentDOM: content,\n        update: updatedNode => {\n          if (updatedNode.type !== this.type) {\n            return false\n          }\n\n          listItem.dataset.checked = updatedNode.attrs.checked\n          checkbox.checked = updatedNode.attrs.checked\n          updateA11Y(updatedNode)\n\n          return true\n        },\n      }\n    }\n  },\n\n  addInputRules() {\n    return [\n      wrappingInputRule({\n        find: inputRegex,\n        type: this.type,\n        getAttributes: match => ({\n          checked: match[match.length - 1] === 'x',\n        }),\n      }),\n    ]\n  },\n})\n","import { mergeAttributes, Node } from '@tiptap/core'\n\nexport interface TaskListOptions {\n  /**\n   * The node type name for a task item.\n   * @default 'taskItem'\n   * @example 'myCustomTaskItem'\n   */\n  itemTypeName: string\n\n  /**\n   * The HTML attributes for a task list node.\n   * @default {}\n   * @example { class: 'foo' }\n   */\n  HTMLAttributes: Record<string, any>\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    taskList: {\n      /**\n       * Toggle a task list\n       * @example editor.commands.toggleTaskList()\n       */\n      toggleTaskList: () => ReturnType\n    }\n  }\n}\n\n/**\n * This extension allows you to create task lists.\n * @see https://www.tiptap.dev/api/nodes/task-list\n */\nexport const TaskList = Node.create<TaskListOptions>({\n  name: 'taskList',\n\n  addOptions() {\n    return {\n      itemTypeName: 'taskItem',\n      HTMLAttributes: {},\n    }\n  },\n\n  group: 'block list',\n\n  content() {\n    return `${this.options.itemTypeName}+`\n  },\n\n  parseHTML() {\n    return [\n      {\n        tag: `ul[data-type=\"${this.name}\"]`,\n        priority: 51,\n      },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['ul', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes, { 'data-type': this.name }), 0]\n  },\n\n  addCommands() {\n    return {\n      toggleTaskList:\n        () =>\n        ({ commands }) => {\n          return commands.toggleList(this.name, this.options.itemTypeName)\n        },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-Shift-9': () => this.editor.commands.toggleTaskList(),\n    }\n  },\n})\n"],"names":["mergeAttributes","Node","getNodeType","isNodeActive","isNodeActive","Extension","mergeAttributes","Node","wrappingInputRule","ListItemName","TextStyleName","mergeAttributes","Node","wrappingInputRule","mergeAttributes","Node","Extension"],"mappings":"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","debugId":null}},
    {"offset": {"line": 3247, "column": 0}, "map": {"version":3,"sources":["file:///D:/masterji/node_modules/%40tiptap/extension-paragraph/src/paragraph.ts","file:///D:/masterji/node_modules/%40tiptap/extension-paragraph/src/index.ts"],"sourcesContent":["import { mergeAttributes, Node } from '@tiptap/core'\n\nexport interface ParagraphOptions {\n  /**\n   * The HTML attributes for a paragraph node.\n   * @default {}\n   * @example { class: 'foo' }\n   */\n  HTMLAttributes: Record<string, any>\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    paragraph: {\n      /**\n       * Toggle a paragraph\n       * @example editor.commands.toggleParagraph()\n       */\n      setParagraph: () => ReturnType\n    }\n  }\n}\n\n/**\n * This extension allows you to create paragraphs.\n * @see https://www.tiptap.dev/api/nodes/paragraph\n */\nexport const Paragraph = Node.create<ParagraphOptions>({\n  name: 'paragraph',\n\n  priority: 1000,\n\n  addOptions() {\n    return {\n      HTMLAttributes: {},\n    }\n  },\n\n  group: 'block',\n\n  content: 'inline*',\n\n  parseHTML() {\n    return [{ tag: 'p' }]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['p', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addCommands() {\n    return {\n      setParagraph:\n        () =>\n        ({ commands }) => {\n          return commands.setNode(this.name)\n        },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-Alt-0': () => this.editor.commands.setParagraph(),\n    }\n  },\n})\n","import { Paragraph } from './paragraph.js'\n\nexport * from './paragraph.js'\n\nexport default Paragraph\n"],"names":[],"mappings":";;;;;AAAA,SAAS,iBAAiB,YAAY;;AA2B/B,IAAM,iKAAY,OAAA,CAAK,MAAA,CAAyB;IACrD,MAAM;IAEN,UAAU;IAEV,aAAa;QACX,OAAO;YACL,gBAAgB,CAAC;QACnB;IACF;IAEA,OAAO;IAEP,SAAS;IAET,YAAY;QACV,OAAO;YAAC;gBAAE,KAAK;YAAI,CAAC;SAAA;IACtB;IAEA,iBAA4B;cAAf,cAAA,CAAe,CAAA,EAAG,CAApB;QACT,OAAO;YAAC;qKAAK,kBAAA,EAAgB,IAAA,CAAK,OAAA,CAAQ,cAAA,EAAgB,cAAc;YAAG,CAAC;SAAA;IAC9E;IAEA,cAAc;QACZ,OAAO;YACL,cACE,IACA;wBAAC,EAAE,QAAA,CAAS,CAAA,KAAM;oBAChB,OAAO,SAAS,OAAA,CAAQ,IAAA,CAAK,IAAI;gBACnC;QACJ;IACF;IAEA,uBAAuB;QACrB,OAAO;YACL,aAAa,IAAM,IAAA,CAAK,MAAA,CAAO,QAAA,CAAS,YAAA,CAAa;QACvD;IACF;AACF,CAAC;;AC7DD,IAAO,gBAAQ","debugId":null}},
    {"offset": {"line": 3301, "column": 0}, "map": {"version":3,"sources":["file:///D:/masterji/node_modules/%40tiptap/extension-strike/src/strike.ts","file:///D:/masterji/node_modules/%40tiptap/extension-strike/src/index.ts"],"sourcesContent":["import { Mark, markInputRule, markPasteRule, mergeAttributes } from '@tiptap/core'\n\nexport interface StrikeOptions {\n  /**\n   * HTML attributes to add to the strike element.\n   * @default {}\n   * @example { class: 'foo' }\n   */\n  HTMLAttributes: Record<string, any>\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    strike: {\n      /**\n       * Set a strike mark\n       * @example editor.commands.setStrike()\n       */\n      setStrike: () => ReturnType\n      /**\n       * Toggle a strike mark\n       * @example editor.commands.toggleStrike()\n       */\n      toggleStrike: () => ReturnType\n      /**\n       * Unset a strike mark\n       * @example editor.commands.unsetStrike()\n       */\n      unsetStrike: () => ReturnType\n    }\n  }\n}\n\n/**\n * Matches a strike to a ~~strike~~ on input.\n */\nexport const inputRegex = /(?:^|\\s)(~~(?!\\s+~~)((?:[^~]+))~~(?!\\s+~~))$/\n\n/**\n * Matches a strike to a ~~strike~~ on paste.\n */\nexport const pasteRegex = /(?:^|\\s)(~~(?!\\s+~~)((?:[^~]+))~~(?!\\s+~~))/g\n\n/**\n * This extension allows you to create strike text.\n * @see https://www.tiptap.dev/api/marks/strike\n */\nexport const Strike = Mark.create<StrikeOptions>({\n  name: 'strike',\n\n  addOptions() {\n    return {\n      HTMLAttributes: {},\n    }\n  },\n\n  parseHTML() {\n    return [\n      {\n        tag: 's',\n      },\n      {\n        tag: 'del',\n      },\n      {\n        tag: 'strike',\n      },\n      {\n        style: 'text-decoration',\n        consuming: false,\n        getAttrs: style => ((style as string).includes('line-through') ? {} : false),\n      },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['s', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addCommands() {\n    return {\n      setStrike:\n        () =>\n        ({ commands }) => {\n          return commands.setMark(this.name)\n        },\n      toggleStrike:\n        () =>\n        ({ commands }) => {\n          return commands.toggleMark(this.name)\n        },\n      unsetStrike:\n        () =>\n        ({ commands }) => {\n          return commands.unsetMark(this.name)\n        },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-Shift-s': () => this.editor.commands.toggleStrike(),\n    }\n  },\n\n  addInputRules() {\n    return [\n      markInputRule({\n        find: inputRegex,\n        type: this.type,\n      }),\n    ]\n  },\n\n  addPasteRules() {\n    return [\n      markPasteRule({\n        find: pasteRegex,\n        type: this.type,\n      }),\n    ]\n  },\n})\n","import { Strike } from './strike.js'\n\nexport * from './strike.js'\n\nexport default Strike\n"],"names":[],"mappings":";;;;;;;AAAA,SAAS,MAAM,eAAe,eAAe,uBAAuB;;AAoC7D,IAAM,aAAa;AAKnB,IAAM,aAAa;AAMnB,IAAM,8JAAS,OAAA,CAAK,MAAA,CAAsB;IAC/C,MAAM;IAEN,aAAa;QACX,OAAO;YACL,gBAAgB,CAAC;QACnB;IACF;IAEA,YAAY;QACV,OAAO;YACL;gBACE,KAAK;YACP;YACA;gBACE,KAAK;YACP;YACA;gBACE,KAAK;YACP;YACA;gBACE,OAAO;gBACP,WAAW;gBACX,UAAU,CAAA,QAAW,MAAiB,QAAA,CAAS,cAAc,IAAI,CAAC,IAAI;YACxE;SACF;IACF;IAEA,YAAW,KAAiB,EAAG;cAAlB,cAAA,CAAe,CAAA;QAC1B,OAAO;YAAC;qKAAK,kBAAA,EAAgB,IAAA,CAAK,OAAA,CAAQ,cAAA,EAAgB,cAAc;YAAG,CAAC;SAAA;IAC9E;IAEA,cAAc;QACZ,OAAO;YACL,WACE,IACA;wBAAC,EAAE,QAAA,CAAS,CAAA,KAAM;oBAChB,OAAO,SAAS,OAAA,CAAQ,IAAA,CAAK,IAAI;gBACnC;YACF,cACE,IACA;wBAAC,EAAE,QAAA,CAAS,CAAA,KAAM;oBAChB,OAAO,SAAS,UAAA,CAAW,IAAA,CAAK,IAAI;gBACtC;YACF,aACE,IACA;wBAAC,EAAE,QAAA,CAAS,CAAA,KAAM;oBAChB,OAAO,SAAS,SAAA,CAAU,IAAA,CAAK,IAAI;gBACrC;QACJ;IACF;IAEA,uBAAuB;QACrB,OAAO;YACL,eAAe,IAAM,IAAA,CAAK,MAAA,CAAO,QAAA,CAAS,YAAA,CAAa;QACzD;IACF;IAEA,gBAAgB;QACd,OAAO;aACL,wKAAA,EAAc;gBACZ,MAAM;gBACN,MAAM,IAAA,CAAK,IAAA;YACb,CAAC;SACH;IACF;IAEA,gBAAgB;QACd,OAAO;qKACL,gBAAA,EAAc;gBACZ,MAAM;gBACN,MAAM,IAAA,CAAK,IAAA;YACb,CAAC;SACH;IACF;AACF,CAAC;;ACtHD,IAAO,gBAAQ","debugId":null}},
    {"offset": {"line": 3391, "column": 0}, "map": {"version":3,"sources":["file:///D:/masterji/node_modules/%40tiptap/extension-text/src/text.ts","file:///D:/masterji/node_modules/%40tiptap/extension-text/src/index.ts"],"sourcesContent":["import { Node } from '@tiptap/core'\n\n/**\n * This extension allows you to create text nodes.\n * @see https://www.tiptap.dev/api/nodes/text\n */\nexport const Text = Node.create({\n  name: 'text',\n  group: 'inline',\n})\n","import { Text } from './text.js'\n\nexport * from './text.js'\n\nexport default Text\n"],"names":[],"mappings":";;;;;AAAA,SAAS,YAAY;;AAMd,IAAM,4JAAO,OAAA,CAAK,MAAA,CAAO;IAC9B,MAAM;IACN,OAAO;AACT,CAAC;;ACLD,IAAO,gBAAQ","debugId":null}},
    {"offset": {"line": 3410, "column": 0}, "map": {"version":3,"sources":["file:///D:/masterji/node_modules/%40tiptap/extension-underline/src/underline.ts","file:///D:/masterji/node_modules/%40tiptap/extension-underline/src/index.ts"],"sourcesContent":["import { Mark, mergeAttributes } from '@tiptap/core'\n\nexport interface UnderlineOptions {\n  /**\n   * HTML attributes to add to the underline element.\n   * @default {}\n   * @example { class: 'foo' }\n   */\n  HTMLAttributes: Record<string, any>\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    underline: {\n      /**\n       * Set an underline mark\n       * @example editor.commands.setUnderline()\n       */\n      setUnderline: () => ReturnType\n      /**\n       * Toggle an underline mark\n       * @example editor.commands.toggleUnderline()\n       */\n      toggleUnderline: () => ReturnType\n      /**\n       * Unset an underline mark\n       * @example editor.commands.unsetUnderline()\n       */\n      unsetUnderline: () => ReturnType\n    }\n  }\n}\n\n/**\n * This extension allows you to create underline text.\n * @see https://www.tiptap.dev/api/marks/underline\n */\nexport const Underline = Mark.create<UnderlineOptions>({\n  name: 'underline',\n\n  addOptions() {\n    return {\n      HTMLAttributes: {},\n    }\n  },\n\n  parseHTML() {\n    return [\n      {\n        tag: 'u',\n      },\n      {\n        style: 'text-decoration',\n        consuming: false,\n        getAttrs: style => ((style as string).includes('underline') ? {} : false),\n      },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['u', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addCommands() {\n    return {\n      setUnderline:\n        () =>\n        ({ commands }) => {\n          return commands.setMark(this.name)\n        },\n      toggleUnderline:\n        () =>\n        ({ commands }) => {\n          return commands.toggleMark(this.name)\n        },\n      unsetUnderline:\n        () =>\n        ({ commands }) => {\n          return commands.unsetMark(this.name)\n        },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-u': () => this.editor.commands.toggleUnderline(),\n      'Mod-U': () => this.editor.commands.toggleUnderline(),\n    }\n  },\n})\n","import { Underline } from './underline.js'\n\nexport * from './underline.js'\n\nexport default Underline\n"],"names":[],"mappings":";;;;;AAAA,SAAS,MAAM,uBAAuB;;AAqC/B,IAAM,iKAAY,OAAA,CAAK,MAAA,CAAyB;IACrD,MAAM;IAEN,aAAa;QACX,OAAO;YACL,gBAAgB,CAAC;QACnB;IACF;IAEA,YAAY;QACV,OAAO;YACL;gBACE,KAAK;YACP;YACA;gBACE,OAAO;gBACP,WAAW;gBACX,UAAU,CAAA,QAAW,MAAiB,QAAA,CAAS,WAAW,IAAI,CAAC,IAAI;YACrE;SACF;IACF;IAEA,iBAA4B;cAAf,cAAA,CAAe,CAAA,EAAG,CAApB;QACT,OAAO;YAAC;qKAAK,kBAAA,EAAgB,IAAA,CAAK,OAAA,CAAQ,cAAA,EAAgB,cAAc;YAAG,CAAC;SAAA;IAC9E;IAEA,cAAc;QACZ,OAAO;YACL,cACE,IACA;wBAAC,EAAE,QAAA,CAAS,CAAA,KAAM;oBAChB,OAAO,SAAS,OAAA,CAAQ,IAAA,CAAK,IAAI;gBACnC;YACF,iBACE,IACA;wBAAC,EAAE,QAAA,CAAS,CAAA,KAAM;oBAChB,OAAO,SAAS,UAAA,CAAW,IAAA,CAAK,IAAI;gBACtC;YACF,gBACE,IACA;wBAAC,EAAE,QAAA,CAAS,CAAA,KAAM;oBAChB,OAAO,SAAS,SAAA,CAAU,IAAA,CAAK,IAAI;gBACrC;QACJ;IACF;IAEA,uBAAuB;QACrB,OAAO;YACL,SAAS,IAAM,IAAA,CAAK,MAAA,CAAO,QAAA,CAAS,eAAA,CAAgB;YACpD,SAAS,IAAM,IAAA,CAAK,MAAA,CAAO,QAAA,CAAS,eAAA,CAAgB;QACtD;IACF;AACF,CAAC;;ACrFD,IAAO,gBAAQ","debugId":null}},
    {"offset": {"line": 3475, "column": 0}, "map": {"version":3,"sources":["file:///D:/masterji/node_modules/%40tiptap/extensions/src/character-count/character-count.ts","file:///D:/masterji/node_modules/%40tiptap/extensions/src/drop-cursor/drop-cursor.ts","file:///D:/masterji/node_modules/%40tiptap/extensions/src/focus/focus.ts","file:///D:/masterji/node_modules/%40tiptap/extensions/src/gap-cursor/gap-cursor.ts","file:///D:/masterji/node_modules/%40tiptap/extensions/src/placeholder/placeholder.ts","file:///D:/masterji/node_modules/%40tiptap/extensions/src/selection/selection.ts","file:///D:/masterji/node_modules/%40tiptap/extensions/src/trailing-node/trailing-node.ts","file:///D:/masterji/node_modules/%40tiptap/extensions/src/undo-redo/undo-redo.ts"],"sourcesContent":["import { Extension } from '@tiptap/core'\nimport type { Node as ProseMirrorNode } from '@tiptap/pm/model'\nimport { Plugin, PluginKey } from '@tiptap/pm/state'\n\nexport interface CharacterCountOptions {\n  /**\n   * The maximum number of characters that should be allowed. Defaults to `0`.\n   * @default null\n   * @example 180\n   */\n  limit: number | null | undefined\n  /**\n   * The mode by which the size is calculated. If set to `textSize`, the textContent of the document is used.\n   * If set to `nodeSize`, the nodeSize of the document is used.\n   * @default 'textSize'\n   * @example 'textSize'\n   */\n  mode: 'textSize' | 'nodeSize'\n  /**\n   * The text counter function to use. Defaults to a simple character count.\n   * @default (text) => text.length\n   * @example (text) => [...new Intl.Segmenter().segment(text)].length\n   */\n  textCounter: (text: string) => number\n  /**\n   * The word counter function to use. Defaults to a simple word count.\n   * @default (text) => text.split(' ').filter(word => word !== '').length\n   * @example (text) => text.split(/\\s+/).filter(word => word !== '').length\n   */\n  wordCounter: (text: string) => number\n}\n\nexport interface CharacterCountStorage {\n  /**\n   * Get the number of characters for the current document.\n   * @param options The options for the character count. (optional)\n   * @param options.node The node to get the characters from. Defaults to the current document.\n   * @param options.mode The mode by which the size is calculated. If set to `textSize`, the textContent of the document is used.\n   */\n  characters: (options?: { node?: ProseMirrorNode; mode?: 'textSize' | 'nodeSize' }) => number\n\n  /**\n   * Get the number of words for the current document.\n   * @param options The options for the character count. (optional)\n   * @param options.node The node to get the words from. Defaults to the current document.\n   */\n  words: (options?: { node?: ProseMirrorNode }) => number\n}\n\ndeclare module '@tiptap/core' {\n  interface Storage {\n    characterCount: CharacterCountStorage\n  }\n}\n\n/**\n * This extension allows you to count the characters and words of your document.\n * @see https://tiptap.dev/api/extensions/character-count\n */\nexport const CharacterCount = Extension.create<CharacterCountOptions, CharacterCountStorage>({\n  name: 'characterCount',\n\n  addOptions() {\n    return {\n      limit: null,\n      mode: 'textSize',\n      textCounter: text => text.length,\n      wordCounter: text => text.split(' ').filter(word => word !== '').length,\n    }\n  },\n\n  addStorage() {\n    return {\n      characters: () => 0,\n      words: () => 0,\n    }\n  },\n\n  onBeforeCreate() {\n    this.storage.characters = options => {\n      const node = options?.node || this.editor.state.doc\n      const mode = options?.mode || this.options.mode\n\n      if (mode === 'textSize') {\n        const text = node.textBetween(0, node.content.size, undefined, ' ')\n\n        return this.options.textCounter(text)\n      }\n\n      return node.nodeSize\n    }\n\n    this.storage.words = options => {\n      const node = options?.node || this.editor.state.doc\n      const text = node.textBetween(0, node.content.size, ' ', ' ')\n\n      return this.options.wordCounter(text)\n    }\n  },\n\n  addProseMirrorPlugins() {\n    let initialEvaluationDone = false\n\n    return [\n      new Plugin({\n        key: new PluginKey('characterCount'),\n        appendTransaction: (transactions, oldState, newState) => {\n          if (initialEvaluationDone) {\n            return\n          }\n\n          const limit = this.options.limit\n\n          if (limit === null || limit === undefined || limit === 0) {\n            initialEvaluationDone = true\n            return\n          }\n\n          const initialContentSize = this.storage.characters({ node: newState.doc })\n\n          if (initialContentSize > limit) {\n            const over = initialContentSize - limit\n            const from = 0\n            const to = over\n\n            console.warn(\n              `[CharacterCount] Initial content exceeded limit of ${limit} characters. Content was automatically trimmed.`,\n            )\n            const tr = newState.tr.deleteRange(from, to)\n\n            initialEvaluationDone = true\n            return tr\n          }\n\n          initialEvaluationDone = true\n        },\n        filterTransaction: (transaction, state) => {\n          const limit = this.options.limit\n\n          // Nothing has changed or no limit is defined. Ignore it.\n          if (!transaction.docChanged || limit === 0 || limit === null || limit === undefined) {\n            return true\n          }\n\n          const oldSize = this.storage.characters({ node: state.doc })\n          const newSize = this.storage.characters({ node: transaction.doc })\n\n          // Everything is in the limit. Good.\n          if (newSize <= limit) {\n            return true\n          }\n\n          // The limit has already been exceeded but will be reduced.\n          if (oldSize > limit && newSize > limit && newSize <= oldSize) {\n            return true\n          }\n\n          // The limit has already been exceeded and will be increased further.\n          if (oldSize > limit && newSize > limit && newSize > oldSize) {\n            return false\n          }\n\n          const isPaste = transaction.getMeta('paste')\n\n          // Block all exceeding transactions that were not pasted.\n          if (!isPaste) {\n            return false\n          }\n\n          // For pasted content, we try to remove the exceeding content.\n          const pos = transaction.selection.$head.pos\n          const over = newSize - limit\n          const from = pos - over\n          const to = pos\n\n          // It’s probably a bad idea to mutate transactions within `filterTransaction`\n          // but for now this is working fine.\n          transaction.deleteRange(from, to)\n\n          // In some situations, the limit will continue to be exceeded after trimming.\n          // This happens e.g. when truncating within a complex node (e.g. table)\n          // and ProseMirror has to close this node again.\n          // If this is the case, we prevent the transaction completely.\n          const updatedSize = this.storage.characters({ node: transaction.doc })\n\n          if (updatedSize > limit) {\n            return false\n          }\n\n          return true\n        },\n      }),\n    ]\n  },\n})\n","import { Extension } from '@tiptap/core'\nimport { dropCursor } from '@tiptap/pm/dropcursor'\n\nexport interface DropcursorOptions {\n  /**\n   * The color of the drop cursor\n   * @default 'currentColor'\n   * @example 'red'\n   */\n  color: string | undefined\n\n  /**\n   * The width of the drop cursor\n   * @default 1\n   * @example 2\n   */\n  width: number | undefined\n\n  /**\n   * The class of the drop cursor\n   * @default undefined\n   * @example 'drop-cursor'\n   */\n  class: string | undefined\n}\n\n/**\n * This extension allows you to add a drop cursor to your editor.\n * A drop cursor is a line that appears when you drag and drop content\n * in-between nodes.\n * @see https://tiptap.dev/api/extensions/dropcursor\n */\nexport const Dropcursor = Extension.create<DropcursorOptions>({\n  name: 'dropCursor',\n\n  addOptions() {\n    return {\n      color: 'currentColor',\n      width: 1,\n      class: undefined,\n    }\n  },\n\n  addProseMirrorPlugins() {\n    return [dropCursor(this.options)]\n  },\n})\n","import { Extension } from '@tiptap/core'\nimport { Plugin, PluginKey } from '@tiptap/pm/state'\nimport { Decoration, DecorationSet } from '@tiptap/pm/view'\n\nexport interface FocusOptions {\n  /**\n   * The class name that should be added to the focused node.\n   * @default 'has-focus'\n   * @example 'is-focused'\n   */\n  className: string\n\n  /**\n   * The mode by which the focused node is determined.\n   * - All: All nodes are marked as focused.\n   * - Deepest: Only the deepest node is marked as focused.\n   * - Shallowest: Only the shallowest node is marked as focused.\n   *\n   * @default 'all'\n   * @example 'deepest'\n   * @example 'shallowest'\n   */\n  mode: 'all' | 'deepest' | 'shallowest'\n}\n\n/**\n * This extension allows you to add a class to the focused node.\n * @see https://www.tiptap.dev/api/extensions/focus\n */\nexport const Focus = Extension.create<FocusOptions>({\n  name: 'focus',\n\n  addOptions() {\n    return {\n      className: 'has-focus',\n      mode: 'all',\n    }\n  },\n\n  addProseMirrorPlugins() {\n    return [\n      new Plugin({\n        key: new PluginKey('focus'),\n        props: {\n          decorations: ({ doc, selection }) => {\n            const { isEditable, isFocused } = this.editor\n            const { anchor } = selection\n            const decorations: Decoration[] = []\n\n            if (!isEditable || !isFocused) {\n              return DecorationSet.create(doc, [])\n            }\n\n            // Maximum Levels\n            let maxLevels = 0\n\n            if (this.options.mode === 'deepest') {\n              doc.descendants((node, pos) => {\n                if (node.isText) {\n                  return\n                }\n\n                const isCurrent = anchor >= pos && anchor <= pos + node.nodeSize - 1\n\n                if (!isCurrent) {\n                  return false\n                }\n\n                maxLevels += 1\n              })\n            }\n\n            // Loop through current\n            let currentLevel = 0\n\n            doc.descendants((node, pos) => {\n              if (node.isText) {\n                return false\n              }\n\n              const isCurrent = anchor >= pos && anchor <= pos + node.nodeSize - 1\n\n              if (!isCurrent) {\n                return false\n              }\n\n              currentLevel += 1\n\n              const outOfScope =\n                (this.options.mode === 'deepest' && maxLevels - currentLevel > 0) ||\n                (this.options.mode === 'shallowest' && currentLevel > 1)\n\n              if (outOfScope) {\n                return this.options.mode === 'deepest'\n              }\n\n              decorations.push(\n                Decoration.node(pos, pos + node.nodeSize, {\n                  class: this.options.className,\n                }),\n              )\n            })\n\n            return DecorationSet.create(doc, decorations)\n          },\n        },\n      }),\n    ]\n  },\n})\n","import type { ParentConfig } from '@tiptap/core'\nimport { callOrReturn, Extension, getExtensionField } from '@tiptap/core'\nimport { gapCursor } from '@tiptap/pm/gapcursor'\n\ndeclare module '@tiptap/core' {\n  interface NodeConfig<Options, Storage> {\n    /**\n     * A function to determine whether the gap cursor is allowed at the current position. Must return `true` or `false`.\n     * @default null\n     */\n    allowGapCursor?:\n      | boolean\n      | null\n      | ((this: {\n          name: string\n          options: Options\n          storage: Storage\n          parent: ParentConfig<NodeConfig<Options>>['allowGapCursor']\n        }) => boolean | null)\n  }\n}\n\n/**\n * This extension allows you to add a gap cursor to your editor.\n * A gap cursor is a cursor that appears when you click on a place\n * where no content is present, for example inbetween nodes.\n * @see https://tiptap.dev/api/extensions/gapcursor\n */\nexport const Gapcursor = Extension.create({\n  name: 'gapCursor',\n\n  addProseMirrorPlugins() {\n    return [gapCursor()]\n  },\n\n  extendNodeSchema(extension) {\n    const context = {\n      name: extension.name,\n      options: extension.options,\n      storage: extension.storage,\n    }\n\n    return {\n      allowGapCursor: callOrReturn(getExtensionField(extension, 'allowGapCursor', context)) ?? null,\n    }\n  },\n})\n","import type { Editor } from '@tiptap/core'\nimport { Extension, isNodeEmpty } from '@tiptap/core'\nimport type { Node as ProsemirrorNode } from '@tiptap/pm/model'\nimport { Plugin, PluginKey } from '@tiptap/pm/state'\nimport { Decoration, DecorationSet } from '@tiptap/pm/view'\n\nexport interface PlaceholderOptions {\n  /**\n   * **The class name for the empty editor**\n   * @default 'is-editor-empty'\n   */\n  emptyEditorClass: string\n\n  /**\n   * **The class name for empty nodes**\n   * @default 'is-empty'\n   */\n  emptyNodeClass: string\n\n  /**\n   * **The placeholder content**\n   *\n   * You can use a function to return a dynamic placeholder or a string.\n   * @default 'Write something …'\n   */\n  placeholder:\n    | ((PlaceholderProps: { editor: Editor; node: ProsemirrorNode; pos: number; hasAnchor: boolean }) => string)\n    | string\n\n  /**\n   * **Checks if the placeholder should be only shown when the editor is editable.**\n   *\n   * If true, the placeholder will only be shown when the editor is editable.\n   * If false, the placeholder will always be shown.\n   * @default true\n   */\n  showOnlyWhenEditable: boolean\n\n  /**\n   * **Checks if the placeholder should be only shown when the current node is empty.**\n   *\n   * If true, the placeholder will only be shown when the current node is empty.\n   * If false, the placeholder will be shown when any node is empty.\n   * @default true\n   */\n  showOnlyCurrent: boolean\n\n  /**\n   * **Controls if the placeholder should be shown for all descendents.**\n   *\n   * If true, the placeholder will be shown for all descendents.\n   * If false, the placeholder will only be shown for the current node.\n   * @default false\n   */\n  includeChildren: boolean\n}\n\n/**\n * This extension allows you to add a placeholder to your editor.\n * A placeholder is a text that appears when the editor or a node is empty.\n * @see https://www.tiptap.dev/api/extensions/placeholder\n */\nexport const Placeholder = Extension.create<PlaceholderOptions>({\n  name: 'placeholder',\n\n  addOptions() {\n    return {\n      emptyEditorClass: 'is-editor-empty',\n      emptyNodeClass: 'is-empty',\n      placeholder: 'Write something …',\n      showOnlyWhenEditable: true,\n      showOnlyCurrent: true,\n      includeChildren: false,\n    }\n  },\n\n  addProseMirrorPlugins() {\n    return [\n      new Plugin({\n        key: new PluginKey('placeholder'),\n        props: {\n          decorations: ({ doc, selection }) => {\n            const active = this.editor.isEditable || !this.options.showOnlyWhenEditable\n            const { anchor } = selection\n            const decorations: Decoration[] = []\n\n            if (!active) {\n              return null\n            }\n\n            const isEmptyDoc = this.editor.isEmpty\n\n            doc.descendants((node, pos) => {\n              const hasAnchor = anchor >= pos && anchor <= pos + node.nodeSize\n              const isEmpty = !node.isLeaf && isNodeEmpty(node)\n\n              if ((hasAnchor || !this.options.showOnlyCurrent) && isEmpty) {\n                const classes = [this.options.emptyNodeClass]\n\n                if (isEmptyDoc) {\n                  classes.push(this.options.emptyEditorClass)\n                }\n\n                const decoration = Decoration.node(pos, pos + node.nodeSize, {\n                  class: classes.join(' '),\n                  'data-placeholder':\n                    typeof this.options.placeholder === 'function'\n                      ? this.options.placeholder({\n                          editor: this.editor,\n                          node,\n                          pos,\n                          hasAnchor,\n                        })\n                      : this.options.placeholder,\n                })\n\n                decorations.push(decoration)\n              }\n\n              return this.options.includeChildren\n            })\n\n            return DecorationSet.create(doc, decorations)\n          },\n        },\n      }),\n    ]\n  },\n})\n","import { Extension, isNodeSelection } from '@tiptap/core'\nimport { Plugin, PluginKey } from '@tiptap/pm/state'\nimport { Decoration, DecorationSet } from '@tiptap/pm/view'\n\nexport type SelectionOptions = {\n  /**\n   * The class name that should be added to the selected text.\n   * @default 'selection'\n   * @example 'is-selected'\n   */\n  className: string\n}\n\n/**\n * This extension allows you to add a class to the selected text.\n * @see https://www.tiptap.dev/api/extensions/selection\n */\nexport const Selection = Extension.create({\n  name: 'selection',\n\n  addOptions() {\n    return {\n      className: 'selection',\n    }\n  },\n\n  addProseMirrorPlugins() {\n    const { editor, options } = this\n\n    return [\n      new Plugin({\n        key: new PluginKey('selection'),\n        props: {\n          decorations(state) {\n            if (\n              state.selection.empty ||\n              editor.isFocused ||\n              !editor.isEditable ||\n              isNodeSelection(state.selection) ||\n              editor.view.dragging\n            ) {\n              return null\n            }\n\n            return DecorationSet.create(state.doc, [\n              Decoration.inline(state.selection.from, state.selection.to, {\n                class: options.className,\n              }),\n            ])\n          },\n        },\n      }),\n    ]\n  },\n})\n\nexport default Selection\n","import { Extension } from '@tiptap/core'\nimport type { Node, NodeType } from '@tiptap/pm/model'\nimport { Plugin, PluginKey } from '@tiptap/pm/state'\n\nfunction nodeEqualsType({ types, node }: { types: NodeType | NodeType[]; node: Node | null | undefined }) {\n  return (node && Array.isArray(types) && types.includes(node.type)) || node?.type === types\n}\n\n/**\n * Extension based on:\n * - https://github.com/ueberdosis/tiptap/blob/v1/packages/tiptap-extensions/src/extensions/TrailingNode.js\n * - https://github.com/remirror/remirror/blob/e0f1bec4a1e8073ce8f5500d62193e52321155b9/packages/prosemirror-trailing-node/src/trailing-node-plugin.ts\n */\n\nexport interface TrailingNodeOptions {\n  /**\n   * The node type that should be inserted at the end of the document.\n   * @note the node will always be added to the `notAfter` lists to\n   * prevent an infinite loop.\n   * @default 'paragraph'\n   */\n  node: string\n  /**\n   * The node types after which the trailing node should not be inserted.\n   * @default ['paragraph']\n   */\n  notAfter?: string | string[]\n}\n\n/**\n * This extension allows you to add an extra node at the end of the document.\n * @see https://www.tiptap.dev/api/extensions/trailing-node\n */\nexport const TrailingNode = Extension.create<TrailingNodeOptions>({\n  name: 'trailingNode',\n\n  addOptions() {\n    return {\n      node: 'paragraph',\n      notAfter: [],\n    }\n  },\n\n  addProseMirrorPlugins() {\n    const plugin = new PluginKey(this.name)\n    const disabledNodes = Object.entries(this.editor.schema.nodes)\n      .map(([, value]) => value)\n      .filter(node => (this.options.notAfter || []).concat(this.options.node).includes(node.name))\n\n    return [\n      new Plugin({\n        key: plugin,\n        appendTransaction: (_, __, state) => {\n          const { doc, tr, schema } = state\n          const shouldInsertNodeAtEnd = plugin.getState(state)\n          const endPosition = doc.content.size\n          const type = schema.nodes[this.options.node]\n\n          if (!shouldInsertNodeAtEnd) {\n            return\n          }\n\n          return tr.insert(endPosition, type.create())\n        },\n        state: {\n          init: (_, state) => {\n            const lastNode = state.tr.doc.lastChild\n\n            return !nodeEqualsType({ node: lastNode, types: disabledNodes })\n          },\n          apply: (tr, value) => {\n            if (!tr.docChanged) {\n              return value\n            }\n\n            const lastNode = tr.doc.lastChild\n\n            return !nodeEqualsType({ node: lastNode, types: disabledNodes })\n          },\n        },\n      }),\n    ]\n  },\n})\n","import { Extension } from '@tiptap/core'\nimport { history, redo, undo } from '@tiptap/pm/history'\n\nexport interface UndoRedoOptions {\n  /**\n   * The amount of history events that are collected before the oldest events are discarded.\n   * @default 100\n   * @example 50\n   */\n  depth: number\n\n  /**\n   * The delay (in milliseconds) between changes after which a new group should be started.\n   * @default 500\n   * @example 1000\n   */\n  newGroupDelay: number\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    undoRedo: {\n      /**\n       * Undo recent changes\n       * @example editor.commands.undo()\n       */\n      undo: () => ReturnType\n      /**\n       * Reapply reverted changes\n       * @example editor.commands.redo()\n       */\n      redo: () => ReturnType\n    }\n  }\n}\n\n/**\n * This extension allows you to undo and redo recent changes.\n * @see https://www.tiptap.dev/api/extensions/undo-redo\n *\n * **Important**: If the `@tiptap/extension-collaboration` package is used, make sure to remove\n * the `undo-redo` extension, as it is not compatible with the `collaboration` extension.\n *\n * `@tiptap/extension-collaboration` uses its own history implementation.\n */\nexport const UndoRedo = Extension.create<UndoRedoOptions>({\n  name: 'undoRedo',\n\n  addOptions() {\n    return {\n      depth: 100,\n      newGroupDelay: 500,\n    }\n  },\n\n  addCommands() {\n    return {\n      undo:\n        () =>\n        ({ state, dispatch }) => {\n          return undo(state, dispatch)\n        },\n      redo:\n        () =>\n        ({ state, dispatch }) => {\n          return redo(state, dispatch)\n        },\n    }\n  },\n\n  addProseMirrorPlugins() {\n    return [history(this.options)]\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-z': () => this.editor.commands.undo(),\n      'Shift-Mod-z': () => this.editor.commands.redo(),\n      'Mod-y': () => this.editor.commands.redo(),\n\n      // Russian keyboard layouts\n      'Mod-я': () => this.editor.commands.undo(),\n      'Shift-Mod-я': () => this.editor.commands.redo(),\n    }\n  },\n})\n"],"names":["Extension","Extension","Plugin","PluginKey","Extension","Extension","Plugin","PluginKey","Decoration","DecorationSet","Extension","Plugin","PluginKey","Decoration","DecorationSet","Extension","Plugin","PluginKey","Extension"],"mappings":"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","debugId":null}},
    {"offset": {"line": 3890, "column": 0}, "map": {"version":3,"sources":["file:///D:/masterji/node_modules/%40tiptap/starter-kit/src/starter-kit.ts","file:///D:/masterji/node_modules/%40tiptap/starter-kit/src/index.ts"],"sourcesContent":["import { Extension } from '@tiptap/core'\nimport type { BlockquoteOptions } from '@tiptap/extension-blockquote'\nimport { Blockquote } from '@tiptap/extension-blockquote'\nimport type { BoldOptions } from '@tiptap/extension-bold'\nimport { Bold } from '@tiptap/extension-bold'\nimport type { CodeOptions } from '@tiptap/extension-code'\nimport { Code } from '@tiptap/extension-code'\nimport type { CodeBlockOptions } from '@tiptap/extension-code-block'\nimport { CodeBlock } from '@tiptap/extension-code-block'\nimport { Document } from '@tiptap/extension-document'\nimport type { HardBreakOptions } from '@tiptap/extension-hard-break'\nimport { HardBreak } from '@tiptap/extension-hard-break'\nimport type { HeadingOptions } from '@tiptap/extension-heading'\nimport { Heading } from '@tiptap/extension-heading'\nimport type { HorizontalRuleOptions } from '@tiptap/extension-horizontal-rule'\nimport { HorizontalRule } from '@tiptap/extension-horizontal-rule'\nimport type { ItalicOptions } from '@tiptap/extension-italic'\nimport { Italic } from '@tiptap/extension-italic'\nimport type { LinkOptions } from '@tiptap/extension-link'\nimport { Link } from '@tiptap/extension-link'\nimport type { BulletListOptions, ListItemOptions, ListKeymapOptions, OrderedListOptions } from '@tiptap/extension-list'\nimport { BulletList, ListItem, ListKeymap, OrderedList } from '@tiptap/extension-list'\nimport type { ParagraphOptions } from '@tiptap/extension-paragraph'\nimport { Paragraph } from '@tiptap/extension-paragraph'\nimport type { StrikeOptions } from '@tiptap/extension-strike'\nimport { Strike } from '@tiptap/extension-strike'\nimport { Text } from '@tiptap/extension-text'\nimport type { UnderlineOptions } from '@tiptap/extension-underline'\nimport { Underline } from '@tiptap/extension-underline'\nimport type { DropcursorOptions, TrailingNodeOptions, UndoRedoOptions } from '@tiptap/extensions'\nimport { Dropcursor, Gapcursor, TrailingNode, UndoRedo } from '@tiptap/extensions'\n\nexport interface StarterKitOptions {\n  /**\n   * If set to false, the blockquote extension will not be registered\n   * @example blockquote: false\n   */\n  blockquote: Partial<BlockquoteOptions> | false\n\n  /**\n   * If set to false, the bold extension will not be registered\n   * @example bold: false\n   */\n  bold: Partial<BoldOptions> | false\n\n  /**\n   * If set to false, the bulletList extension will not be registered\n   * @example bulletList: false\n   */\n  bulletList: Partial<BulletListOptions> | false\n\n  /**\n   * If set to false, the code extension will not be registered\n   * @example code: false\n   */\n  code: Partial<CodeOptions> | false\n\n  /**\n   * If set to false, the codeBlock extension will not be registered\n   * @example codeBlock: false\n   */\n  codeBlock: Partial<CodeBlockOptions> | false\n\n  /**\n   * If set to false, the document extension will not be registered\n   * @example document: false\n   */\n  document: false\n\n  /**\n   * If set to false, the dropcursor extension will not be registered\n   * @example dropcursor: false\n   */\n  dropcursor: Partial<DropcursorOptions> | false\n\n  /**\n   * If set to false, the gapcursor extension will not be registered\n   * @example gapcursor: false\n   */\n  gapcursor: false\n\n  /**\n   * If set to false, the hardBreak extension will not be registered\n   * @example hardBreak: false\n   */\n  hardBreak: Partial<HardBreakOptions> | false\n\n  /**\n   * If set to false, the heading extension will not be registered\n   * @example heading: false\n   */\n  heading: Partial<HeadingOptions> | false\n\n  /**\n   * If set to false, the undo-redo extension will not be registered\n   * @example undoRedo: false\n   */\n  undoRedo: Partial<UndoRedoOptions> | false\n\n  /**\n   * If set to false, the horizontalRule extension will not be registered\n   * @example horizontalRule: false\n   */\n  horizontalRule: Partial<HorizontalRuleOptions> | false\n\n  /**\n   * If set to false, the italic extension will not be registered\n   * @example italic: false\n   */\n  italic: Partial<ItalicOptions> | false\n\n  /**\n   * If set to false, the listItem extension will not be registered\n   * @example listItem: false\n   */\n  listItem: Partial<ListItemOptions> | false\n\n  /**\n   * If set to false, the listItemKeymap extension will not be registered\n   * @example listKeymap: false\n   */\n  listKeymap: Partial<ListKeymapOptions> | false\n\n  /**\n   * If set to false, the link extension will not be registered\n   * @example link: false\n   */\n  link: Partial<LinkOptions> | false\n\n  /**\n   * If set to false, the orderedList extension will not be registered\n   * @example orderedList: false\n   */\n  orderedList: Partial<OrderedListOptions> | false\n\n  /**\n   * If set to false, the paragraph extension will not be registered\n   * @example paragraph: false\n   */\n  paragraph: Partial<ParagraphOptions> | false\n\n  /**\n   * If set to false, the strike extension will not be registered\n   * @example strike: false\n   */\n  strike: Partial<StrikeOptions> | false\n\n  /**\n   * If set to false, the text extension will not be registered\n   * @example text: false\n   */\n  text: false\n\n  /**\n   * If set to false, the underline extension will not be registered\n   * @example underline: false\n   */\n  underline: Partial<UnderlineOptions> | false\n\n  /**\n   * If set to false, the trailingNode extension will not be registered\n   * @example trailingNode: false\n   */\n  trailingNode: Partial<TrailingNodeOptions> | false\n}\n\n/**\n * The starter kit is a collection of essential editor extensions.\n *\n * It’s a good starting point for building your own editor.\n */\nexport const StarterKit = Extension.create<StarterKitOptions>({\n  name: 'starterKit',\n\n  addExtensions() {\n    const extensions = []\n\n    if (this.options.bold !== false) {\n      extensions.push(Bold.configure(this.options.bold))\n    }\n\n    if (this.options.blockquote !== false) {\n      extensions.push(Blockquote.configure(this.options.blockquote))\n    }\n\n    if (this.options.bulletList !== false) {\n      extensions.push(BulletList.configure(this.options.bulletList))\n    }\n\n    if (this.options.code !== false) {\n      extensions.push(Code.configure(this.options.code))\n    }\n\n    if (this.options.codeBlock !== false) {\n      extensions.push(CodeBlock.configure(this.options.codeBlock))\n    }\n\n    if (this.options.document !== false) {\n      extensions.push(Document.configure(this.options.document))\n    }\n\n    if (this.options.dropcursor !== false) {\n      extensions.push(Dropcursor.configure(this.options.dropcursor))\n    }\n\n    if (this.options.gapcursor !== false) {\n      extensions.push(Gapcursor.configure(this.options.gapcursor))\n    }\n\n    if (this.options.hardBreak !== false) {\n      extensions.push(HardBreak.configure(this.options.hardBreak))\n    }\n\n    if (this.options.heading !== false) {\n      extensions.push(Heading.configure(this.options.heading))\n    }\n\n    if (this.options.undoRedo !== false) {\n      extensions.push(UndoRedo.configure(this.options.undoRedo))\n    }\n\n    if (this.options.horizontalRule !== false) {\n      extensions.push(HorizontalRule.configure(this.options.horizontalRule))\n    }\n\n    if (this.options.italic !== false) {\n      extensions.push(Italic.configure(this.options.italic))\n    }\n\n    if (this.options.listItem !== false) {\n      extensions.push(ListItem.configure(this.options.listItem))\n    }\n\n    if (this.options.listKeymap !== false) {\n      extensions.push(ListKeymap.configure(this.options?.listKeymap))\n    }\n\n    if (this.options.link !== false) {\n      extensions.push(Link.configure(this.options?.link))\n    }\n\n    if (this.options.orderedList !== false) {\n      extensions.push(OrderedList.configure(this.options.orderedList))\n    }\n\n    if (this.options.paragraph !== false) {\n      extensions.push(Paragraph.configure(this.options.paragraph))\n    }\n\n    if (this.options.strike !== false) {\n      extensions.push(Strike.configure(this.options.strike))\n    }\n\n    if (this.options.text !== false) {\n      extensions.push(Text.configure(this.options.text))\n    }\n\n    if (this.options.underline !== false) {\n      extensions.push(Underline.configure(this.options?.underline))\n    }\n\n    if (this.options.trailingNode !== false) {\n      extensions.push(TrailingNode.configure(this.options?.trailingNode))\n    }\n\n    return extensions\n  },\n})\n","import { StarterKit } from './starter-kit.js'\n\nexport type { StarterKitOptions } from './starter-kit.js'\nexport * from './starter-kit.js'\n\nexport default StarterKit\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 4011, "column": 0}, "map": {"version":3,"sources":["file:///D:/masterji/node_modules/%40tiptap/extension-text-align/src/text-align.ts","file:///D:/masterji/node_modules/%40tiptap/extension-text-align/src/index.ts"],"sourcesContent":["import { Extension } from '@tiptap/core'\n\nexport interface TextAlignOptions {\n  /**\n   * The types where the text align attribute can be applied.\n   * @default []\n   * @example ['heading', 'paragraph']\n   */\n  types: string[]\n\n  /**\n   * The alignments which are allowed.\n   * @default ['left', 'center', 'right', 'justify']\n   * @example ['left', 'right']\n   */\n  alignments: string[]\n\n  /**\n   * The default alignment.\n   * @default null\n   * @example 'center'\n   */\n  defaultAlignment: string | null\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    textAlign: {\n      /**\n       * Set the text align attribute\n       * @param alignment The alignment\n       * @example editor.commands.setTextAlign('left')\n       */\n      setTextAlign: (alignment: string) => ReturnType\n      /**\n       * Unset the text align attribute\n       * @example editor.commands.unsetTextAlign()\n       */\n      unsetTextAlign: () => ReturnType\n      /**\n       * Toggle the text align attribute\n       * @param alignment The alignment\n       * @example editor.commands.toggleTextAlign('right')\n       */\n      toggleTextAlign: (alignment: string) => ReturnType\n    }\n  }\n}\n\n/**\n * This extension allows you to align text.\n * @see https://www.tiptap.dev/api/extensions/text-align\n */\nexport const TextAlign = Extension.create<TextAlignOptions>({\n  name: 'textAlign',\n\n  addOptions() {\n    return {\n      types: [],\n      alignments: ['left', 'center', 'right', 'justify'],\n      defaultAlignment: null,\n    }\n  },\n\n  addGlobalAttributes() {\n    return [\n      {\n        types: this.options.types,\n        attributes: {\n          textAlign: {\n            default: this.options.defaultAlignment,\n            parseHTML: element => {\n              const alignment = element.style.textAlign\n\n              return this.options.alignments.includes(alignment) ? alignment : this.options.defaultAlignment\n            },\n            renderHTML: attributes => {\n              if (!attributes.textAlign) {\n                return {}\n              }\n\n              return { style: `text-align: ${attributes.textAlign}` }\n            },\n          },\n        },\n      },\n    ]\n  },\n\n  addCommands() {\n    return {\n      setTextAlign:\n        (alignment: string) =>\n        ({ commands }) => {\n          if (!this.options.alignments.includes(alignment)) {\n            return false\n          }\n\n          return this.options.types\n            .map(type => commands.updateAttributes(type, { textAlign: alignment }))\n            .every(response => response)\n        },\n\n      unsetTextAlign:\n        () =>\n        ({ commands }) => {\n          return this.options.types.map(type => commands.resetAttributes(type, 'textAlign')).every(response => response)\n        },\n\n      toggleTextAlign:\n        alignment =>\n        ({ editor, commands }) => {\n          if (!this.options.alignments.includes(alignment)) {\n            return false\n          }\n\n          if (editor.isActive({ textAlign: alignment })) {\n            return commands.unsetTextAlign()\n          }\n          return commands.setTextAlign(alignment)\n        },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-Shift-l': () => this.editor.commands.setTextAlign('left'),\n      'Mod-Shift-e': () => this.editor.commands.setTextAlign('center'),\n      'Mod-Shift-r': () => this.editor.commands.setTextAlign('right'),\n      'Mod-Shift-j': () => this.editor.commands.setTextAlign('justify'),\n    }\n  },\n})\n","import { TextAlign } from './text-align.js'\n\nexport * from './text-align.js'\n\nexport default TextAlign\n"],"names":[],"mappings":";;;;;AAAA,SAAS,iBAAiB;;AAqDnB,IAAM,iKAAY,YAAA,CAAU,MAAA,CAAyB;IAC1D,MAAM;IAEN,aAAa;QACX,OAAO;YACL,OAAO,CAAC,CAAA;YACR,YAAY;gBAAC;gBAAQ;gBAAU;gBAAS,SAAS;aAAA;YACjD,kBAAkB;QACpB;IACF;IAEA,sBAAsB;QACpB,OAAO;YACL;gBACE,OAAO,IAAA,CAAK,OAAA,CAAQ,KAAA;gBACpB,YAAY;oBACV,WAAW;wBACT,SAAS,IAAA,CAAK,OAAA,CAAQ,gBAAA;wBACtB,WAAW,CAAA,YAAW;4BACpB,MAAM,YAAY,QAAQ,KAAA,CAAM,SAAA;4BAEhC,OAAO,IAAA,CAAK,OAAA,CAAQ,UAAA,CAAW,QAAA,CAAS,SAAS,IAAI,YAAY,IAAA,CAAK,OAAA,CAAQ,gBAAA;wBAChF;wBACA,YAAY,CAAA,eAAc;4BACxB,IAAI,CAAC,WAAW,SAAA,EAAW;gCACzB,OAAO,CAAC;4BACV;4BAEA,OAAO;gCAAE,OAAO,eAAmC,OAApB,WAAW,SAAS;4BAAG;wBACxD;oBACF;gBACF;YACF;SACF;IACF;IAEA,cAAc;QACZ,OAAO;YACL,cACE,CAAC,YACD;wBAAC,EAAE,QAAA,CAAS,CAAA,KAAM;oBAChB,IAAI,CAAC,IAAA,CAAK,OAAA,CAAQ,UAAA,CAAW,QAAA,CAAS,SAAS,GAAG;wBAChD,OAAO;oBACT;oBAEA,OAAO,IAAA,CAAK,OAAA,CAAQ,KAAA,CACjB,GAAA,CAAI,CAAA,OAAQ,SAAS,gBAAA,CAAiB,MAAM;4BAAE,WAAW;wBAAU,CAAC,CAAC,EACrE,KAAA,CAAM,CAAA,WAAY,QAAQ;gBAC/B;YAEF,gBACE,IACA;wBAAC,EAAE,QAAA,CAAS,CAAA,KAAM;oBAChB,OAAO,IAAA,CAAK,OAAA,CAAQ,KAAA,CAAM,GAAA,CAAI,CAAA,OAAQ,SAAS,eAAA,CAAgB,MAAM,WAAW,CAAC,EAAE,KAAA,CAAM,CAAA,WAAY,QAAQ;gBAC/G;YAEF,iBACE,CAAA,YACA;wBAAC,EAAE,MAAA,EAAQ,QAAA,CAAS,CAAA,KAAM;oBACxB,IAAI,CAAC,IAAA,CAAK,OAAA,CAAQ,UAAA,CAAW,QAAA,CAAS,SAAS,GAAG;wBAChD,OAAO;oBACT;oBAEA,IAAI,OAAO,QAAA,CAAS;wBAAE,WAAW;oBAAU,CAAC,GAAG;wBAC7C,OAAO,SAAS,cAAA,CAAe;oBACjC;oBACA,OAAO,SAAS,YAAA,CAAa,SAAS;gBACxC;QACJ;IACF;IAEA,uBAAuB;QACrB,OAAO;YACL,eAAe,IAAM,IAAA,CAAK,MAAA,CAAO,QAAA,CAAS,YAAA,CAAa,MAAM;YAC7D,eAAe,IAAM,IAAA,CAAK,MAAA,CAAO,QAAA,CAAS,YAAA,CAAa,QAAQ;YAC/D,eAAe,IAAM,IAAA,CAAK,MAAA,CAAO,QAAA,CAAS,YAAA,CAAa,OAAO;YAC9D,eAAe,IAAM,IAAA,CAAK,MAAA,CAAO,QAAA,CAAS,YAAA,CAAa,SAAS;QAClE;IACF;AACF,CAAC;;AChID,IAAO,gBAAQ","debugId":null}}]
}